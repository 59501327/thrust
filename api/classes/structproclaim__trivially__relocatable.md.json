{
  "abstract": false,
  "anchor": "",
  "baseClasses": [
    {
      "external": true,
      "name": "false_type",
      "refid": null,
      "virtual": "non-virtual",
      "visibility": "public"
    }
  ],
  "brief": "<a href=\"http://eel.is/c++draft/namespace.std#def:customization_point\">_customization point_</a> that can be specialized customized to indicate that a type <code>T</code> is <a href=\"https://wg21.link/P1144\">_TriviallyRelocatable_</a>, aka it can be bitwise copied with a facility like <a href=\"https://en.cppreference.com/w/cpp/string/byte/memcpy\"><code>std::memcpy</code></a>. ",
  "category": "classes",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "proclaim_trivially_relocatable",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "includes": "<thrust/type_traits/is_trivially_relocatable.h>",
  "inline": false,
  "kind": "struct",
  "location": {
    "bodyEnd": 213,
    "bodyFile": "thrust/type_traits/is_trivially_relocatable.h",
    "bodyStart": 213,
    "column": 48,
    "file": "thrust/type_traits/is_trivially_relocatable.h",
    "line": 213
  },
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "type_traits",
    "kind": "group",
    "name": "type_traits",
    "refid": "group__type__traits",
    "title": "Type Traits",
    "url": "/api/groups/group__type__traits.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "utility",
      "kind": "group",
      "name": "utility",
      "refid": "group__utility",
      "title": "Utility",
      "url": "/api/groups/group__utility.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "type_traits",
      "kind": "group",
      "name": "type_traits",
      "refid": "group__type__traits",
      "title": "Type Traits",
      "url": "/api/groups/group__type__traits.html",
      "visibility": "public"
    }
  ],
  "name": "proclaim_trivially_relocatable",
  "override": false,
  "parent": null,
  "refid": "structproclaim__trivially__relocatable",
  "see": [
    "<a href=\"/api/groups/group__type__traits.html#using-is_indirectly_trivially_relocatable_to\">is_indirectly_trivially_relocatable_to</a>",
    "<a href=\"/api/groups/group__type__traits.html#using-is_trivially_relocatable\">is_trivially_relocatable</a>",
    "<a href=\"/api/groups/group__type__traits.html#using-is_trivially_relocatable_to\">is_trivially_relocatable_to</a>",
    "<a href=\"/api/groups/group__type__traits.html#define-thrust_proclaim_trivially_relocatable\">THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE</a>"
  ],
  "static": false,
  "strong": false,
  "summary": "customization point that can be specialized customized to indicate that a type T is TriviallyRelocatable, aka it can be bitwise copied with a facility like std::memcpy. ",
  "templateParams": [
    {
      "name": "",
      "type": "typename T",
      "typePlain": "typename T"
    }
  ],
  "title": "proclaim_trivially_relocatable",
  "url": "/api/classes/structproclaim__trivially__relocatable.html",
  "visibility": "public"
}