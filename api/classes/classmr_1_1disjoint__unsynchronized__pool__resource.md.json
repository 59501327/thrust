{
  "abstract": false,
  "anchor": "",
  "baseClasses": [
    {
      "external": false,
      "name": "mr::memory_resource< Upstream::pointer >",
      "publicFunctions": [
        {
          "abstract": false,
          "anchor": "#function-~memory_resource",
          "argsString": "()=default",
          "category": "functions",
          "const": false,
          "default": true,
          "definition": "virtual mr::memory_resource< Pointer >::~memory_resource",
          "deleted": false,
          "details": "Virtual destructor, defaulted when possible. ",
          "explicit": false,
          "fullname": "mr::memory_resource::~memory_resource",
          "hasDetails": true,
          "inline": false,
          "kind": "function",
          "location": {
            "column": 13,
            "file": "thrust/mr/memory_resource.h",
            "line": 57
          },
          "name": "~memory_resource",
          "override": false,
          "params": [],
          "pureVirtual": false,
          "refid": "classmr_1_1memory__resource_1a4f3ce6e89a6690d9c5b2eced397475b5",
          "static": false,
          "strong": false,
          "title": "~memory_resource",
          "url": "/api/classes/classmr_1_1memory__resource.html#function-~memory_resource",
          "virtual": true,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-allocate",
          "argsString": "(std::size_t bytes, std::size_t alignment=alignof(std::max_align_t))",
          "category": "functions",
          "const": false,
          "default": false,
          "definition": "pointer mr::memory_resource< Pointer >::allocate",
          "deleted": false,
          "details": "Allocates memory of size at least <code>bytes</code> and alignment at least <code>alignment</code>.",
          "exceptionsList": [
            {
              "name": "thrust::bad_alloc",
              "text": "when no memory with requested size and alignment can be allocated. "
            }
          ],
          "explicit": false,
          "fullname": "mr::memory_resource::allocate",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "location": {
            "bodyEnd": 70,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 67,
            "column": 13,
            "file": "thrust/mr/memory_resource.h",
            "line": 67
          },
          "name": "allocate",
          "override": false,
          "paramList": [
            {
              "name": "bytes",
              "text": "size, in bytes, that is requested from this allocation "
            },
            {
              "name": "alignment",
              "text": "alignment that is requested from this allocation "
            }
          ],
          "params": [
            {
              "name": "bytes",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            },
            {
              "defval": "alignof(std::max_align_t)",
              "defvalPlain": "alignof(std::max_align_t)",
              "name": "alignment",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            }
          ],
          "pureVirtual": false,
          "refid": "classmr_1_1memory__resource_1afcc350d74d7a1a9cf1efa30c79224d6f",
          "returns": [
            "A pointer to void to the newly allocated memory. "
          ],
          "static": false,
          "strong": false,
          "title": "allocate",
          "type": "<a href=\"/api/classes/classmr_1_1memory__resource.html#typedef-pointer\">pointer</a>",
          "typePlain": "pointer",
          "url": "/api/classes/classmr_1_1memory__resource.html#function-allocate",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-deallocate",
          "argsString": "(pointer p, std::size_t bytes, std::size_t alignment=alignof(std::max_align_t))",
          "category": "functions",
          "const": false,
          "default": false,
          "definition": "void mr::memory_resource< Pointer >::deallocate",
          "deleted": false,
          "details": "Deallocates memory pointed to by <code>p</code>.",
          "explicit": false,
          "fullname": "mr::memory_resource::deallocate",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "location": {
            "bodyEnd": 83,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 80,
            "column": 10,
            "file": "thrust/mr/memory_resource.h",
            "line": 80
          },
          "name": "deallocate",
          "override": false,
          "paramList": [
            {
              "name": "p",
              "text": "pointer to be deallocated "
            },
            {
              "name": "bytes",
              "text": "the size of the allocation. This must be equivalent to the value of <code>bytes</code> that was passed to the allocation function that returned <code>p</code>. "
            },
            {
              "name": "alignment",
              "text": "the alignment of the allocation. This must be equivalent to the value of <code>alignment</code> that was passed to the allocation function that returned <code>p</code>. "
            }
          ],
          "params": [
            {
              "name": "p",
              "type": "<a href=\"/api/classes/classmr_1_1memory__resource.html#typedef-pointer\">pointer</a>",
              "typePlain": "pointer"
            },
            {
              "name": "bytes",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            },
            {
              "defval": "alignof(std::max_align_t)",
              "defvalPlain": "alignof(std::max_align_t)",
              "name": "alignment",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            }
          ],
          "pureVirtual": false,
          "refid": "classmr_1_1memory__resource_1a19428f748cea54a8c86aa31244c85edd",
          "static": false,
          "strong": false,
          "title": "deallocate",
          "type": "void",
          "typePlain": "void",
          "url": "/api/classes/classmr_1_1memory__resource.html#function-deallocate",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-is_equal",
          "argsString": "(const memory_resource &other) const noexcept",
          "category": "functions",
          "const": true,
          "default": false,
          "definition": "__host__ __device__ bool mr::memory_resource< Pointer >::is_equal",
          "deleted": false,
          "details": "Compares this resource to the other one. The default implementation uses identity comparison, which is often the right thing to do and doesn't require RTTI involvement.",
          "explicit": false,
          "fullname": "mr::memory_resource::is_equal",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "location": {
            "bodyEnd": 95,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 92,
            "column": 10,
            "file": "thrust/mr/memory_resource.h",
            "line": 92
          },
          "name": "is_equal",
          "override": false,
          "paramList": [
            {
              "name": "other",
              "text": "the other resource to compare this resource to "
            }
          ],
          "params": [
            {
              "name": "other",
              "type": "const <a href=\"/api/classes/classmr_1_1memory__resource.html\">memory_resource</a> &",
              "typePlain": "const memory_resource &"
            }
          ],
          "pureVirtual": false,
          "refid": "classmr_1_1memory__resource_1aefccecd23a68e0236a20a78275c9da92",
          "returns": [
            "whether the two resources are equivalent. "
          ],
          "static": false,
          "strong": false,
          "title": "is_equal",
          "type": "__host__ __device__ bool",
          "typePlain": "__host__ __device__ bool",
          "url": "/api/classes/classmr_1_1memory__resource.html#function-is_equal",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-do_is_equal",
          "argsString": "(const memory_resource &other) const noexcept",
          "category": "functions",
          "const": true,
          "default": false,
          "definition": "__host__ virtual __device__ bool mr::memory_resource< Pointer >::do_is_equal",
          "deleted": false,
          "details": "Compares this resource to the other one. The default implementation uses identity comparison, which is often the right thing to do and doesn't require RTTI involvement.",
          "explicit": false,
          "fullname": "mr::memory_resource::do_is_equal",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "location": {
            "bodyEnd": 126,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 123,
            "column": 18,
            "file": "thrust/mr/memory_resource.h",
            "line": 123
          },
          "name": "do_is_equal",
          "override": false,
          "paramList": [
            {
              "name": "other",
              "text": "the other resource to compare this resource to "
            }
          ],
          "params": [
            {
              "name": "other",
              "type": "const <a href=\"/api/classes/classmr_1_1memory__resource.html\">memory_resource</a> &",
              "typePlain": "const memory_resource &"
            }
          ],
          "pureVirtual": false,
          "refid": "classmr_1_1memory__resource_1a6b484c618a6c5bcf3e3b9f6926d72ed5",
          "returns": [
            "whether the two resources are equivalent. "
          ],
          "static": false,
          "strong": false,
          "title": "do_is_equal",
          "type": "__host__ virtual __device__ bool",
          "typePlain": "__host__ virtual __device__ bool",
          "url": "/api/classes/classmr_1_1memory__resource.html#function-do_is_equal",
          "virtual": true,
          "visibility": "public"
        }
      ],
      "publicTypes": [
        {
          "abstract": false,
          "anchor": "#typedef-pointer",
          "category": "types",
          "const": false,
          "definition": "typedef Pointer mr::memory_resource< Pointer >::pointer",
          "details": "Alias for the template parameter. ",
          "explicit": false,
          "fullname": "mr::memory_resource::pointer",
          "hasDetails": true,
          "inline": false,
          "kind": "typedef",
          "location": {
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 53,
            "column": 21,
            "file": "thrust/mr/memory_resource.h",
            "line": 53
          },
          "name": "pointer",
          "override": false,
          "refid": "classmr_1_1memory__resource_1a850cab063deba2dbde9f8ad30ae8c9ad",
          "static": false,
          "strong": false,
          "title": "pointer",
          "type": "Pointer",
          "typePlain": "Pointer",
          "url": "/api/classes/classmr_1_1memory__resource.html#typedef-pointer",
          "visibility": "public"
        }
      ],
      "refid": "classmr_1_1memory__resource",
      "url": "/api/classes/classmr_1_1memory__resource.html",
      "virtual": "non-virtual",
      "visibility": "public"
    },
    {
      "external": true,
      "name": "mr::validator2< Upstream, Bookkeeper >",
      "refid": null,
      "virtual": "non-virtual",
      "visibility": "private"
    }
  ],
  "category": "classes",
  "const": false,
  "definition": "",
  "details": "A memory resource adaptor allowing for pooling and caching allocations from <code>Upstream</code>, using <code>Bookkeeper</code> for management of that cached and pooled memory, allowing to cache portions of memory inaccessible from the host.\n\nOn a typical memory resource, calls to <code>allocate</code> and <code>deallocate</code> actually allocate and deallocate memory. Pooling memory resources only allocate and deallocate memory from an external resource (the upstream memory resource) when there's no suitable memory currently cached; otherwise, they use memory they have acquired beforehand, to make memory allocation faster and more efficient.\n\nThe disjoint version of the pool resources uses a separate upstream memory resource, <code>Bookkeeper</code>, to allocate memory necessary to manage the cached memory. There may be many reasons to do that; the canonical one is that <code>Upstream</code> allocates memory that is inaccessible to the code of the pool resource, which means that it cannot embed the necessary information in memory obtained from <code>Upstream</code>; for instance, <code>Upstream</code> can be a CUDA non-managed memory resource, or a CUDA managed memory resource whose memory we would prefer to not migrate back and forth between host and device when executing bookkeeping code.\n\nThis is not the only case where it makes sense to use a disjoint pool resource, though. In a multi-core environment it may be beneficial to avoid stealing cache lines from other cores by writing over bookkeeping information embedded in an allocated block of memory. In such a case, one can imagine wanting to use a disjoint pool where both the upstream and the bookkeeper are of the same type, to allocate memory consistently, but separately for those two purposes.",
  "explicit": false,
  "fullname": "mr::disjoint_unsynchronized_pool_resource",
  "hasAdditionalMembers": true,
  "hasDetails": true,
  "includes": "<thrust/mr/disjoint_pool.h>",
  "inline": false,
  "kind": "class",
  "location": {
    "bodyEnd": 482,
    "bodyFile": "thrust/mr/disjoint_pool.h",
    "bodyStart": 71,
    "column": 1,
    "file": "thrust/mr/disjoint_pool.h",
    "line": 74
  },
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "memory_resources",
    "kind": "group",
    "name": "memory_resources",
    "refid": "group__memory__resources",
    "title": "Memory Resources",
    "url": "/api/groups/group__memory__resources.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "brief": "All Thrust functionalities related to memory allocation and deallocation. ",
      "category": "modules",
      "fullname": "memory_management",
      "kind": "group",
      "name": "memory_management",
      "refid": "group__memory__management",
      "summary": "All Thrust functionalities related to memory allocation and deallocation. ",
      "title": "Memory Management",
      "url": "/api/groups/group__memory__management.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "memory_resources",
      "kind": "group",
      "name": "memory_resources",
      "refid": "group__memory__resources",
      "title": "Memory Resources",
      "url": "/api/groups/group__memory__resources.html",
      "visibility": "public"
    }
  ],
  "name": "mr::disjoint_unsynchronized_pool_resource",
  "override": false,
  "parent": {
    "anchor": "",
    "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
    "category": "namespaces",
    "fullname": "mr",
    "kind": "namespace",
    "name": "mr",
    "refid": "namespacemr",
    "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
    "title": "mr",
    "url": "/api/namespaces/namespacemr.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
      "category": "namespaces",
      "fullname": "mr",
      "kind": "namespace",
      "name": "mr",
      "refid": "namespacemr",
      "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
      "title": "mr",
      "url": "/api/namespaces/namespacemr.html",
      "visibility": "public"
    }
  ],
  "privateAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-m_upstream",
      "category": "attributes",
      "const": false,
      "definition": "Upstream* mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_upstream",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::m_upstream",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 268,
        "column": 15,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 268
      },
      "name": "m_upstream",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a51f4bff209143997653fce7d906ae22b",
      "static": false,
      "strong": false,
      "title": "m_upstream",
      "type": "Upstream *",
      "typePlain": "Upstream *",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#variable-m_upstream",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_bookkeeper",
      "category": "attributes",
      "const": false,
      "definition": "Bookkeeper* mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_bookkeeper",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::m_bookkeeper",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 269,
        "column": 17,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 269
      },
      "name": "m_bookkeeper",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1ac673a38fee85af35f4a3287a7a10ea04",
      "static": false,
      "strong": false,
      "title": "m_bookkeeper",
      "type": "Bookkeeper *",
      "typePlain": "Bookkeeper *",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#variable-m_bookkeeper",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_options",
      "category": "attributes",
      "const": false,
      "definition": "pool_options mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_options",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::m_options",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 271,
        "column": 18,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 271
      },
      "name": "m_options",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a317fa270f7fcda34569371384fbb4c3a",
      "static": false,
      "strong": false,
      "title": "m_options",
      "type": "<a href=\"/api/classes/structmr_1_1pool__options.html\">pool_options</a>",
      "typePlain": "pool_options",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#variable-m_options",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_smallest_block_log2",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_smallest_block_log2",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::m_smallest_block_log2",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 272,
        "column": 17,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 272
      },
      "name": "m_smallest_block_log2",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1ad9583558bf539a9ef11b962dbe5d46ed",
      "static": false,
      "strong": false,
      "title": "m_smallest_block_log2",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#variable-m_smallest_block_log2",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_pools",
      "category": "attributes",
      "const": false,
      "definition": "pool_vector mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_pools",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::m_pools",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 275,
        "column": 17,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 275
      },
      "name": "m_pools",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1aae4cebd629ae6f625bb63db8af0cf2f5",
      "static": false,
      "strong": false,
      "title": "m_pools",
      "type": "pool_vector",
      "typePlain": "pool_vector",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#variable-m_pools",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_allocated",
      "category": "attributes",
      "const": false,
      "definition": "chunk_vector mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_allocated",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::m_allocated",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 277,
        "column": 18,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 277
      },
      "name": "m_allocated",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a66487d5910f7c3c040a8dae2b0b39df8",
      "static": false,
      "strong": false,
      "title": "m_allocated",
      "type": "chunk_vector",
      "typePlain": "chunk_vector",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#variable-m_allocated",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_cached_oversized",
      "category": "attributes",
      "const": false,
      "definition": "oversized_block_vector mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_cached_oversized",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::m_cached_oversized",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 279,
        "column": 28,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 279
      },
      "name": "m_cached_oversized",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a8fa35c251c8935d9145c5551085ee764",
      "static": false,
      "strong": false,
      "title": "m_cached_oversized",
      "type": "oversized_block_vector",
      "typePlain": "oversized_block_vector",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#variable-m_cached_oversized",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_oversized",
      "category": "attributes",
      "const": false,
      "definition": "oversized_block_vector mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_oversized",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::m_oversized",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 281,
        "column": 28,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 281
      },
      "name": "m_oversized",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1ac146f5f3517a7e061009692e828ced84",
      "static": false,
      "strong": false,
      "title": "m_oversized",
      "type": "oversized_block_vector",
      "typePlain": "oversized_block_vector",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#variable-m_oversized",
      "visibility": "private"
    }
  ],
  "privateClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "mr::disjoint_unsynchronized_pool_resource::chunk_descriptor",
      "kind": "struct",
      "name": "mr::disjoint_unsynchronized_pool_resource::chunk_descriptor",
      "refid": "structmr_1_1disjoint__unsynchronized__pool__resource_1_1chunk__descriptor",
      "title": "mr::disjoint_unsynchronized_pool_resource::chunk_descriptor",
      "url": "/api/classes/structmr_1_1disjoint__unsynchronized__pool__resource_1_1chunk__descriptor.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "mr::disjoint_unsynchronized_pool_resource::equal_pointers",
      "kind": "struct",
      "name": "mr::disjoint_unsynchronized_pool_resource::equal_pointers",
      "refid": "structmr_1_1disjoint__unsynchronized__pool__resource_1_1equal__pointers",
      "title": "mr::disjoint_unsynchronized_pool_resource::equal_pointers",
      "url": "/api/classes/structmr_1_1disjoint__unsynchronized__pool__resource_1_1equal__pointers.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "mr::disjoint_unsynchronized_pool_resource::matching_alignment",
      "kind": "struct",
      "name": "mr::disjoint_unsynchronized_pool_resource::matching_alignment",
      "refid": "structmr_1_1disjoint__unsynchronized__pool__resource_1_1matching__alignment",
      "title": "mr::disjoint_unsynchronized_pool_resource::matching_alignment",
      "url": "/api/classes/structmr_1_1disjoint__unsynchronized__pool__resource_1_1matching__alignment.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "mr::disjoint_unsynchronized_pool_resource::oversized_block_descriptor",
      "kind": "struct",
      "name": "mr::disjoint_unsynchronized_pool_resource::oversized_block_descriptor",
      "refid": "structmr_1_1disjoint__unsynchronized__pool__resource_1_1oversized__block__descriptor",
      "title": "mr::disjoint_unsynchronized_pool_resource::oversized_block_descriptor",
      "url": "/api/classes/structmr_1_1disjoint__unsynchronized__pool__resource_1_1oversized__block__descriptor.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "mr::disjoint_unsynchronized_pool_resource::pool",
      "kind": "struct",
      "name": "mr::disjoint_unsynchronized_pool_resource::pool",
      "refid": "structmr_1_1disjoint__unsynchronized__pool__resource_1_1pool",
      "title": "mr::disjoint_unsynchronized_pool_resource::pool",
      "url": "/api/classes/structmr_1_1disjoint__unsynchronized__pool__resource_1_1pool.html",
      "visibility": "private"
    }
  ],
  "privateTypes": [
    {
      "abstract": false,
      "anchor": "#typedef-void_ptr",
      "category": "types",
      "const": false,
      "definition": "typedef Upstream::pointer mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::void_ptr",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::void_ptr",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 157,
        "column": 40,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 157
      },
      "name": "void_ptr",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a87b032ad22c483f8ebbfeedaebdaaacf",
      "static": false,
      "strong": false,
      "title": "void_ptr",
      "type": "Upstream::pointer",
      "typePlain": "Upstream::pointer",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#typedef-void_ptr",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-char_ptr",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<void_ptr>::template rebind<char>::other mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::char_ptr",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::char_ptr",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 158,
        "column": 79,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 158
      },
      "name": "char_ptr",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a9c15ae6158c488654c54be58a086d46b",
      "static": false,
      "strong": false,
      "title": "char_ptr",
      "type": "thrust::detail::pointer_traits< void_ptr >::template rebind< char >::other",
      "typePlain": "thrust::detail::pointer_traits< void_ptr >::template rebind< char >::other",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#typedef-char_ptr",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-chunk_vector",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::host_vector< chunk_descriptor, allocator<chunk_descriptor, Bookkeeper> > mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::chunk_vector",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::chunk_vector",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 169,
        "column": 2,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 169
      },
      "name": "chunk_vector",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1ae6e4c958b237590105277f73d561fb70",
      "static": false,
      "strong": false,
      "title": "chunk_vector",
      "type": "thrust::host_vector< chunk_descriptor, <a href=\"/api/classes/classmr_1_1allocator.html\">allocator</a>< chunk_descriptor, Bookkeeper > >",
      "typePlain": "thrust::host_vector< chunk_descriptor, allocator< chunk_descriptor, Bookkeeper > >",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#typedef-chunk_vector",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-oversized_block_vector",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::host_vector< oversized_block_descriptor, allocator<oversized_block_descriptor, Bookkeeper> > mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::oversized_block_vector",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::oversized_block_vector",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 229,
        "column": 2,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 229
      },
      "name": "oversized_block_vector",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a0c7b2eab160f81ff4a13968a3fb70476",
      "static": false,
      "strong": false,
      "title": "oversized_block_vector",
      "type": "thrust::host_vector< oversized_block_descriptor, <a href=\"/api/classes/classmr_1_1allocator.html\">allocator</a>< oversized_block_descriptor, Bookkeeper > >",
      "typePlain": "thrust::host_vector< oversized_block_descriptor, allocator< oversized_block_descriptor, Bookkeeper > >",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#typedef-oversized_block_vector",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-pointer_vector",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::host_vector< void_ptr, allocator<void_ptr, Bookkeeper> > mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::pointer_vector",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::pointer_vector",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 234,
        "column": 2,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 234
      },
      "name": "pointer_vector",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a32882639eeee0b86f54464822a310b24",
      "static": false,
      "strong": false,
      "title": "pointer_vector",
      "type": "thrust::host_vector< void_ptr, <a href=\"/api/classes/classmr_1_1allocator.html\">allocator</a>< void_ptr, Bookkeeper > >",
      "typePlain": "thrust::host_vector< void_ptr, allocator< void_ptr, Bookkeeper > >",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#typedef-pointer_vector",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-pool_vector",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::host_vector< pool, allocator<pool, Bookkeeper> > mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::pool_vector",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::pool_vector",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 266,
        "column": 2,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 266
      },
      "name": "pool_vector",
      "override": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1ad6b0dfdef3c7b22fa2499b5543944f2a",
      "static": false,
      "strong": false,
      "title": "pool_vector",
      "type": "thrust::host_vector< pool, <a href=\"/api/classes/classmr_1_1allocator.html\">allocator</a>< pool, Bookkeeper > >",
      "typePlain": "thrust::host_vector< pool, allocator< pool, Bookkeeper > >",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#typedef-pool_vector",
      "visibility": "private"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-get_default_options",
      "argsString": "()",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "static pool_options mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::get_default_options",
      "deleted": false,
      "details": "Get the default options for a disjoint pool. These are meant to be a sensible set of values for many use cases, and as such, may be tuned in the future. This function is exposed so that creating a set of options that are just a slight departure from the defaults is easy. ",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::get_default_options",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 100,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 80,
        "column": 25,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 80
      },
      "name": "get_default_options",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1aa90838b92c810aefe13f4ec999ae3521",
      "static": true,
      "strong": false,
      "title": "get_default_options",
      "type": "<a href=\"/api/classes/structmr_1_1pool__options.html\">pool_options</a>",
      "typePlain": "pool_options",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#function-get_default_options",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-disjoint_unsynchronized_pool_resource",
      "argsString": "(Upstream *upstream, Bookkeeper *bookkeeper, pool_options options=get_default_options())",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::disjoint_unsynchronized_pool_resource",
      "deleted": false,
      "details": "Constructor.",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::disjoint_unsynchronized_pool_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 124,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 108,
        "column": 5,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 108
      },
      "name": "disjoint_unsynchronized_pool_resource",
      "override": false,
      "paramList": [
        {
          "name": "upstream",
          "text": "the upstream memory resource for allocations "
        },
        {
          "name": "bookkeeper",
          "text": "the upstream memory resource for bookkeeping "
        },
        {
          "name": "options",
          "text": "pool options to use "
        }
      ],
      "params": [
        {
          "name": "upstream",
          "type": "Upstream *",
          "typePlain": "Upstream *"
        },
        {
          "name": "bookkeeper",
          "type": "Bookkeeper *",
          "typePlain": "Bookkeeper *"
        },
        {
          "defval": "<a href=\"/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#function-get_default_options\">get_default_options</a>()",
          "defvalPlain": "get_default_options()",
          "name": "options",
          "type": "<a href=\"/api/classes/structmr_1_1pool__options.html\">pool_options</a>",
          "typePlain": "pool_options"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a76c96198da126c70c0c2677626f19b07",
      "static": false,
      "strong": false,
      "title": "disjoint_unsynchronized_pool_resource",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#function-disjoint_unsynchronized_pool_resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-disjoint_unsynchronized_pool_resource",
      "argsString": "(pool_options options=get_default_options())",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::disjoint_unsynchronized_pool_resource",
      "deleted": false,
      "details": "Constructor. Upstream and bookkeeping resources are obtained by calling <code>get&#95;global&#95;resource</code> for their types.",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::disjoint_unsynchronized_pool_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 147,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 132,
        "column": 5,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 132
      },
      "name": "disjoint_unsynchronized_pool_resource",
      "override": false,
      "paramList": [
        {
          "name": "options",
          "text": "pool options to use "
        }
      ],
      "params": [
        {
          "defval": "<a href=\"/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#function-get_default_options\">get_default_options</a>()",
          "defvalPlain": "get_default_options()",
          "name": "options",
          "type": "<a href=\"/api/classes/structmr_1_1pool__options.html\">pool_options</a>",
          "typePlain": "pool_options"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a2801936a120785e1937d79a6c9844071",
      "static": false,
      "strong": false,
      "title": "disjoint_unsynchronized_pool_resource",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#function-disjoint_unsynchronized_pool_resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-~disjoint_unsynchronized_pool_resource",
      "argsString": "()",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::~disjoint_unsynchronized_pool_resource",
      "deleted": false,
      "details": "Destructor. Releases all held memory to upstream. ",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::~disjoint_unsynchronized_pool_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 154,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 151,
        "column": 5,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 151
      },
      "name": "~disjoint_unsynchronized_pool_resource",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a3da109860e323c0b8e7e9ff799b46d0a",
      "static": false,
      "strong": false,
      "title": "~disjoint_unsynchronized_pool_resource",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#function-~disjoint_unsynchronized_pool_resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-release",
      "argsString": "()",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::release",
      "deleted": false,
      "details": "Releases all held memory to upstream. ",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::release",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 316,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 286,
        "column": 10,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 286
      },
      "name": "release",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a69c9866e66fa194cedb33c3445ee3bd9",
      "static": false,
      "strong": false,
      "title": "release",
      "type": "void",
      "typePlain": "void",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#function-release",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-do_allocate",
      "argsString": "(std::size_t bytes, std::size_t alignment=alignof(std::max_align_t)) override",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "virtual void_ptr mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::do_allocate",
      "deleted": false,
      "details": "Allocates memory of size at least <code>bytes</code> and alignment at least <code>alignment</code>.",
      "exceptionsList": [
        {
          "name": "thrust::bad_alloc",
          "text": "when no memory with requested size and alignment can be allocated. "
        }
      ],
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::do_allocate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 443,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 318,
        "column": 23,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 318
      },
      "name": "do_allocate",
      "override": true,
      "paramList": [
        {
          "name": "bytes",
          "text": "size, in bytes, that is requested from this allocation "
        },
        {
          "name": "alignment",
          "text": "alignment that is requested from this allocation "
        }
      ],
      "params": [
        {
          "name": "bytes",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        },
        {
          "defval": "alignof(std::max_align_t)",
          "defvalPlain": "alignof(std::max_align_t)",
          "name": "alignment",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a65d9c33f1b012dbf8384b50a73fc36d7",
      "reimplements": {
        "anchor": "#function-do_allocate",
        "category": "functions",
        "fullname": "mr::memory_resource::do_allocate",
        "kind": "function",
        "name": "do_allocate",
        "pureVirtual": true,
        "refid": "classmr_1_1memory__resource_1a166d253df9e98b69db8b3fc7f13716e3",
        "title": "do_allocate",
        "url": "/api/classes/classmr_1_1memory__resource.html#function-do_allocate",
        "virtual": true,
        "visibility": "public"
      },
      "returns": [
        "A pointer to void to the newly allocated memory. "
      ],
      "static": false,
      "strong": false,
      "title": "do_allocate",
      "type": "void_ptr",
      "typePlain": "void_ptr",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#function-do_allocate",
      "virtual": true,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-do_deallocate",
      "argsString": "(void_ptr p, std::size_t n, std::size_t alignment=alignof(std::max_align_t)) override",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "virtual void mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::do_deallocate",
      "deleted": false,
      "details": "Deallocates memory pointed to by <code>p</code>.",
      "explicit": false,
      "fullname": "mr::disjoint_unsynchronized_pool_resource::do_deallocate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 481,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 445,
        "column": 18,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 445
      },
      "name": "do_deallocate",
      "override": true,
      "paramList": [
        {
          "name": "p",
          "text": "pointer to be deallocated "
        },
        {
          "name": "bytes",
          "text": "the size of the allocation. This must be equivalent to the value of <code>bytes</code> that was passed to the allocation function that returned <code>p</code>. "
        },
        {
          "name": "alignment",
          "text": "the size of the allocation. This must be equivalent to the value of <code>alignment</code> that was passed to the allocation function that returned <code>p</code>. "
        }
      ],
      "params": [
        {
          "name": "p",
          "type": "void_ptr",
          "typePlain": "void_ptr"
        },
        {
          "name": "bytes",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        },
        {
          "defval": "alignof(std::max_align_t)",
          "defvalPlain": "alignof(std::max_align_t)",
          "name": "alignment",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1disjoint__unsynchronized__pool__resource_1a055cae6a290bd749bc275dd0b269e73d",
      "reimplements": {
        "anchor": "#function-do_deallocate",
        "category": "functions",
        "fullname": "mr::memory_resource::do_deallocate",
        "kind": "function",
        "name": "do_deallocate",
        "pureVirtual": true,
        "refid": "classmr_1_1memory__resource_1adbc95e08e5e7ad5943ef6a82f7747336",
        "title": "do_deallocate",
        "url": "/api/classes/classmr_1_1memory__resource.html#function-do_deallocate",
        "virtual": true,
        "visibility": "public"
      },
      "static": false,
      "strong": false,
      "title": "do_deallocate",
      "type": "void",
      "typePlain": "void",
      "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html#function-do_deallocate",
      "virtual": true,
      "visibility": "public"
    }
  ],
  "refid": "classmr_1_1disjoint__unsynchronized__pool__resource",
  "static": false,
  "strong": false,
  "templateParams": [
    {
      "name": "",
      "type": "typename Upstream",
      "typePlain": "typename Upstream"
    },
    {
      "name": "",
      "type": "typename Bookkeeper",
      "typePlain": "typename Bookkeeper"
    }
  ],
  "templateParamsList": [
    {
      "name": "Upstream",
      "text": "the type of memory resources that will be used for allocating memory blocks to be handed off to the user "
    },
    {
      "name": "Bookkeeper",
      "text": "the type of memory resources that will be used for allocating bookkeeping memory "
    }
  ],
  "title": "mr::disjoint_unsynchronized_pool_resource",
  "url": "/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html",
  "visibility": "public"
}