{
  "abstract": false,
  "anchor": "",
  "baseClasses": [
    {
      "external": true,
      "name": "mr::validator< MR >",
      "refid": null,
      "virtual": "non-virtual",
      "visibility": "private"
    }
  ],
  "category": "classes",
  "const": false,
  "definition": "",
  "details": "An <code><a href=\"/thrust/api/classes/classmr_1_1allocator.html\">mr::allocator</a></code> is a template that fulfills the C++ requirements for Allocators, allowing to use the NPA-based memory resources where an Allocator is required. Unlike memory resources, but like other allocators, <code><a href=\"/thrust/api/classes/classmr_1_1allocator.html\">mr::allocator</a></code> is typed and bound to allocate object of a specific type, however it can be freely rebound to other types.",
  "explicit": false,
  "fullname": "mr::allocator",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "includes": "<thrust/mr/allocator.h>",
  "inline": false,
  "kind": "class",
  "location": {
    "bodyEnd": 154,
    "bodyFile": "thrust/mr/allocator.h",
    "bodyStart": 52,
    "column": 1,
    "file": "thrust/mr/allocator.h",
    "line": 53
  },
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "allocators",
    "kind": "group",
    "name": "allocators",
    "refid": "group__allocators",
    "title": "Allocators",
    "url": "/thrust/api/groups/group__allocators.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "brief": "All Thrust functionalities related to memory allocation and deallocation. ",
      "category": "modules",
      "fullname": "memory_management",
      "kind": "group",
      "name": "memory_management",
      "refid": "group__memory__management",
      "summary": "All Thrust functionalities related to memory allocation and deallocation. ",
      "title": "Memory Management",
      "url": "/thrust/api/groups/group__memory__management.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "allocators",
      "kind": "group",
      "name": "allocators",
      "refid": "group__allocators",
      "title": "Allocators",
      "url": "/thrust/api/groups/group__allocators.html",
      "visibility": "public"
    }
  ],
  "name": "mr::allocator",
  "override": false,
  "parent": {
    "anchor": "",
    "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
    "category": "namespaces",
    "fullname": "mr",
    "kind": "namespace",
    "name": "mr",
    "refid": "namespacemr",
    "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
    "title": "mr",
    "url": "/thrust/api/namespaces/namespacemr.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
      "category": "namespaces",
      "fullname": "mr",
      "kind": "namespace",
      "name": "mr",
      "refid": "namespacemr",
      "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
      "title": "mr",
      "url": "/thrust/api/namespaces/namespacemr.html",
      "visibility": "public"
    }
  ],
  "privateAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-mem_res",
      "category": "attributes",
      "const": false,
      "definition": "MR* mr::allocator< T, MR >::mem_res",
      "explicit": false,
      "fullname": "mr::allocator::mem_res",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 153,
        "column": 9,
        "file": "thrust/mr/allocator.h",
        "line": 153
      },
      "name": "mem_res",
      "override": false,
      "refid": "classmr_1_1allocator_1ae584884d9b350192b4c26ee0343450f6",
      "static": false,
      "strong": false,
      "title": "mem_res",
      "type": "MR *",
      "typePlain": "MR *",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#variable-mem_res",
      "visibility": "private"
    }
  ],
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "mr::allocator::rebind",
      "kind": "struct",
      "name": "mr::allocator::rebind",
      "refid": "structmr_1_1allocator_1_1rebind",
      "title": "mr::allocator::rebind",
      "url": "/thrust/api/classes/structmr_1_1allocator_1_1rebind.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-max_size",
      "argsString": "() const",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ size_type mr::allocator< T, MR >::max_size",
      "deleted": false,
      "details": "Calculates the maximum number of elements allocated by this allocator.",
      "explicit": false,
      "fullname": "mr::allocator::max_size",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 101,
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 98,
        "column": 15,
        "file": "thrust/mr/allocator.h",
        "line": 98
      },
      "name": "max_size",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classmr_1_1allocator_1ad1cc5ad8a65165cf98124877ea13b49c",
      "returns": [
        "the maximum value of <code>std::size&#95;t</code>, divided by the size of <code>T</code>. "
      ],
      "static": false,
      "strong": false,
      "title": "max_size",
      "type": "__thrust_exec_check_disable__ __host__ __device__ <a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-size_type\">size_type</a>",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ size_type",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#function-max_size",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-allocator",
      "argsString": "(MR *resource)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ mr::allocator< T, MR >::allocator",
      "deleted": false,
      "details": "Constructor.",
      "explicit": false,
      "fullname": "mr::allocator::allocator",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 110,
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 108,
        "column": 5,
        "file": "thrust/mr/allocator.h",
        "line": 108
      },
      "name": "allocator",
      "override": false,
      "paramList": [
        {
          "name": "resource",
          "text": "the resource to be used to allocate raw memory. "
        }
      ],
      "params": [
        {
          "name": "resource",
          "type": "MR *",
          "typePlain": "MR *"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1allocator_1a14a3da524c45ebb525bb5bfa6e2a2416",
      "static": false,
      "strong": false,
      "title": "allocator",
      "type": "__host__ __device__",
      "typePlain": "__host__ __device__",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#function-allocator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-allocator",
      "argsString": "(const allocator< U, MR > &other)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ mr::allocator< T, MR >::allocator",
      "deleted": false,
      "details": "Copy constructor. Copies the resource pointer. ",
      "explicit": false,
      "fullname": "mr::allocator::allocator",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 117,
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 115,
        "column": 5,
        "file": "thrust/mr/allocator.h",
        "line": 115
      },
      "name": "allocator",
      "override": false,
      "params": [
        {
          "name": "other",
          "type": "const <a href=\"/thrust/api/classes/classmr_1_1allocator.html\">allocator</a>< U, MR > &",
          "typePlain": "const allocator< U, MR > &"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1allocator_1a94eec277ffd1167b998d7fc399176557",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename U",
          "typePlain": "typename U"
        }
      ],
      "title": "allocator",
      "type": "__host__ __device__",
      "typePlain": "__host__ __device__",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#function-allocator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-allocate",
      "argsString": "(size_type n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ pointer mr::allocator< T, MR >::allocate",
      "deleted": false,
      "details": "Allocates objects of type <code>T</code>.",
      "explicit": false,
      "fullname": "mr::allocator::allocate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 129,
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 126,
        "column": 13,
        "file": "thrust/mr/allocator.h",
        "line": 126
      },
      "name": "allocate",
      "override": false,
      "paramList": [
        {
          "name": "n",
          "text": "number of elements to allocate "
        }
      ],
      "params": [
        {
          "name": "n",
          "type": "<a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-size_type\">size_type</a>",
          "typePlain": "size_type"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1allocator_1aa18a53ab2f58881ce2cba221c557545e",
      "returns": [
        "a pointer to the newly allocated storage. "
      ],
      "static": false,
      "strong": false,
      "title": "allocate",
      "type": "__host__ <a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-pointer\">pointer</a>",
      "typePlain": "__host__ pointer",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#function-allocate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-deallocate",
      "argsString": "(pointer p, size_type n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ void mr::allocator< T, MR >::deallocate",
      "deleted": false,
      "details": "Deallocates objects of type <code>T</code>.",
      "explicit": false,
      "fullname": "mr::allocator::deallocate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 140,
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 137,
        "column": 10,
        "file": "thrust/mr/allocator.h",
        "line": 137
      },
      "name": "deallocate",
      "override": false,
      "paramList": [
        {
          "name": "p",
          "text": "pointer returned by a previous call to <code>allocate</code>"
        },
        {
          "name": "n",
          "text": "number of elements, passed as an argument to the <code>allocate</code> call that produced <code>p</code>"
        }
      ],
      "params": [
        {
          "name": "p",
          "type": "<a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-pointer\">pointer</a>",
          "typePlain": "pointer"
        },
        {
          "name": "n",
          "type": "<a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-size_type\">size_type</a>",
          "typePlain": "size_type"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1allocator_1a3e4de8547e30c23926235b20cee5b292",
      "static": false,
      "strong": false,
      "title": "deallocate",
      "type": "__host__ void",
      "typePlain": "__host__ void",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#function-deallocate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-resource",
      "argsString": "() const",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "__host__ __device__ MR* mr::allocator< T, MR >::resource",
      "deleted": false,
      "details": "Extracts the memory resource used by this allocator.",
      "explicit": false,
      "fullname": "mr::allocator::resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 150,
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 147,
        "column": 9,
        "file": "thrust/mr/allocator.h",
        "line": 147
      },
      "name": "resource",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classmr_1_1allocator_1a5a8e4195279c897abcac4d42e12bd3bb",
      "returns": [
        "the memory resource used by this allocator. "
      ],
      "static": false,
      "strong": false,
      "title": "resource",
      "type": "__host__ __device__ MR *",
      "typePlain": "__host__ __device__ MR *",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#function-resource",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#typedef-void_pointer",
      "category": "types",
      "const": false,
      "definition": "typedef MR::pointer mr::allocator< T, MR >::void_pointer",
      "details": "The pointer to void type of this allocator. ",
      "explicit": false,
      "fullname": "mr::allocator::void_pointer",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 56,
        "column": 34,
        "file": "thrust/mr/allocator.h",
        "line": 56
      },
      "name": "void_pointer",
      "override": false,
      "refid": "classmr_1_1allocator_1a5648355eb7b1a1e3ae5905d25cdb89b5",
      "static": false,
      "strong": false,
      "title": "void_pointer",
      "type": "MR::pointer",
      "typePlain": "MR::pointer",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-void_pointer",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-value_type",
      "category": "types",
      "const": false,
      "definition": "typedef T mr::allocator< T, MR >::value_type",
      "details": "The value type allocated by this allocator. Equivalent to <code>T</code>. ",
      "explicit": false,
      "fullname": "mr::allocator::value_type",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 59,
        "column": 15,
        "file": "thrust/mr/allocator.h",
        "line": 59
      },
      "name": "value_type",
      "override": false,
      "refid": "classmr_1_1allocator_1a07b19739c0aecf080ec940c7b50a47ec",
      "static": false,
      "strong": false,
      "title": "value_type",
      "type": "T",
      "typePlain": "T",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-value_type",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-pointer",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<void_pointer>::template rebind<T>::other mr::allocator< T, MR >::pointer",
      "details": "The pointer type allocated by this allocator. Equivaled to the pointer type of <code>MR</code> rebound to <code>T</code>. ",
      "explicit": false,
      "fullname": "mr::allocator::pointer",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 61,
        "column": 79,
        "file": "thrust/mr/allocator.h",
        "line": 61
      },
      "name": "pointer",
      "override": false,
      "refid": "classmr_1_1allocator_1a98648646babbb1a50cd93e9f8af395cc",
      "static": false,
      "strong": false,
      "title": "pointer",
      "type": "thrust::detail::pointer_traits< <a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-void_pointer\">void_pointer</a> >::template <a href=\"/thrust/api/classes/structmr_1_1allocator_1_1rebind.html\">rebind</a>< T >::other",
      "typePlain": "thrust::detail::pointer_traits< void_pointer >::template rebind< T >::other",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-pointer",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-const_pointer",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<void_pointer>::template rebind<const T>::other mr::allocator< T, MR >::const_pointer",
      "details": "The pointer to const type. Equivalent to a pointer type of <code>MR</code> rebound to <code>const T</code>. ",
      "explicit": false,
      "fullname": "mr::allocator::const_pointer",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 63,
        "column": 79,
        "file": "thrust/mr/allocator.h",
        "line": 63
      },
      "name": "const_pointer",
      "override": false,
      "refid": "classmr_1_1allocator_1a0fff87412aa5cc1ec37bd105eaf8618a",
      "static": false,
      "strong": false,
      "title": "const_pointer",
      "type": "thrust::detail::pointer_traits< <a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-void_pointer\">void_pointer</a> >::template <a href=\"/thrust/api/classes/structmr_1_1allocator_1_1rebind.html\">rebind</a>< const T >::other",
      "typePlain": "thrust::detail::pointer_traits< void_pointer >::template rebind< const T >::other",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-const_pointer",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-reference",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<pointer>::reference mr::allocator< T, MR >::reference",
      "details": "The reference to the type allocated by this allocator. Supports smart references. ",
      "explicit": false,
      "fullname": "mr::allocator::reference",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 65,
        "column": 65,
        "file": "thrust/mr/allocator.h",
        "line": 65
      },
      "name": "reference",
      "override": false,
      "refid": "classmr_1_1allocator_1a39c7451e27a690b869923f4462ae8259",
      "static": false,
      "strong": false,
      "title": "reference",
      "type": "thrust::detail::pointer_traits< <a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-pointer\">pointer</a> >::<a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-reference\">reference</a>",
      "typePlain": "thrust::detail::pointer_traits< pointer >::reference",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-reference",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-const_reference",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<const_pointer>::reference mr::allocator< T, MR >::const_reference",
      "details": "The const reference to the type allocated by this allocator. Supports smart references. ",
      "explicit": false,
      "fullname": "mr::allocator::const_reference",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 67,
        "column": 65,
        "file": "thrust/mr/allocator.h",
        "line": 67
      },
      "name": "const_reference",
      "override": false,
      "refid": "classmr_1_1allocator_1a1726552f2adfb458e26270f5f379f9ef",
      "static": false,
      "strong": false,
      "title": "const_reference",
      "type": "thrust::detail::pointer_traits< <a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-const_pointer\">const_pointer</a> >::<a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-reference\">reference</a>",
      "typePlain": "thrust::detail::pointer_traits< const_pointer >::reference",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-const_reference",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-size_type",
      "category": "types",
      "const": false,
      "definition": "typedef std::size_t mr::allocator< T, MR >::size_type",
      "details": "The size type of this allocator. Always <code>std::size&#95;t</code>. ",
      "explicit": false,
      "fullname": "mr::allocator::size_type",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 69,
        "column": 25,
        "file": "thrust/mr/allocator.h",
        "line": 69
      },
      "name": "size_type",
      "override": false,
      "refid": "classmr_1_1allocator_1a97e64336cea504d324bc37e74ba684be",
      "static": false,
      "strong": false,
      "title": "size_type",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-size_type",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-difference_type",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<pointer>::difference_type mr::allocator< T, MR >::difference_type",
      "details": "The difference type between pointers allocated by this allocator. ",
      "explicit": false,
      "fullname": "mr::allocator::difference_type",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 71,
        "column": 71,
        "file": "thrust/mr/allocator.h",
        "line": 71
      },
      "name": "difference_type",
      "override": false,
      "refid": "classmr_1_1allocator_1a4e81d9a979b01accd3e666c033819b97",
      "static": false,
      "strong": false,
      "title": "difference_type",
      "type": "thrust::detail::pointer_traits< <a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-pointer\">pointer</a> >::<a href=\"/thrust/api/classes/classmr_1_1allocator.html#typedef-difference_type\">difference_type</a>",
      "typePlain": "thrust::detail::pointer_traits< pointer >::difference_type",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-difference_type",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-propagate_on_container_copy_assignment",
      "category": "types",
      "const": false,
      "definition": "typedef detail::true_type mr::allocator< T, MR >::propagate_on_container_copy_assignment",
      "details": "Specifies that the allocator shall be propagated on container copy assignment. ",
      "explicit": false,
      "fullname": "mr::allocator::propagate_on_container_copy_assignment",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 74,
        "column": 31,
        "file": "thrust/mr/allocator.h",
        "line": 74
      },
      "name": "propagate_on_container_copy_assignment",
      "override": false,
      "refid": "classmr_1_1allocator_1a5ace3ed83a57b074de55e541d1806385",
      "static": false,
      "strong": false,
      "title": "propagate_on_container_copy_assignment",
      "type": "detail::true_type",
      "typePlain": "detail::true_type",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-propagate_on_container_copy_assignment",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-propagate_on_container_move_assignment",
      "category": "types",
      "const": false,
      "definition": "typedef detail::true_type mr::allocator< T, MR >::propagate_on_container_move_assignment",
      "details": "Specifies that the allocator shall be propagated on container move assignment. ",
      "explicit": false,
      "fullname": "mr::allocator::propagate_on_container_move_assignment",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 76,
        "column": 31,
        "file": "thrust/mr/allocator.h",
        "line": 76
      },
      "name": "propagate_on_container_move_assignment",
      "override": false,
      "refid": "classmr_1_1allocator_1a97284d60c3e91c7883d157eb074320d7",
      "static": false,
      "strong": false,
      "title": "propagate_on_container_move_assignment",
      "type": "detail::true_type",
      "typePlain": "detail::true_type",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-propagate_on_container_move_assignment",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-propagate_on_container_swap",
      "category": "types",
      "const": false,
      "definition": "typedef detail::true_type mr::allocator< T, MR >::propagate_on_container_swap",
      "details": "Specifies that the allocator shall be propagated on container swap. ",
      "explicit": false,
      "fullname": "mr::allocator::propagate_on_container_swap",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 78,
        "column": 31,
        "file": "thrust/mr/allocator.h",
        "line": 78
      },
      "name": "propagate_on_container_swap",
      "override": false,
      "refid": "classmr_1_1allocator_1ab8f03bc987b80c62b7507d49a628eea5",
      "static": false,
      "strong": false,
      "title": "propagate_on_container_swap",
      "type": "detail::true_type",
      "typePlain": "detail::true_type",
      "url": "/thrust/api/classes/classmr_1_1allocator.html#typedef-propagate_on_container_swap",
      "visibility": "public"
    }
  ],
  "refid": "classmr_1_1allocator",
  "static": false,
  "strong": false,
  "templateParams": [
    {
      "name": "",
      "type": "typename T",
      "typePlain": "typename T"
    },
    {
      "name": "",
      "type": "class MR",
      "typePlain": "class MR"
    }
  ],
  "templateParamsList": [
    {
      "name": "T",
      "text": "the type that will be allocated by this allocator. "
    },
    {
      "name": "MR",
      "text": "the upstream memory resource to use for memory allocation. Must derive from <code>thrust::mr::memory&#95;resource</code> and must be <code>final</code> (in C++11 and beyond). "
    }
  ],
  "title": "mr::allocator",
  "url": "/thrust/api/classes/classmr_1_1allocator.html",
  "visibility": "public"
}