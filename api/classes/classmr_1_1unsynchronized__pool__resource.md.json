{
  "abstract": false,
  "anchor": "",
  "baseClasses": [
    {
      "external": false,
      "name": "mr::memory_resource< Upstream::pointer >",
      "publicFunctions": [
        {
          "abstract": false,
          "anchor": "#function-~memory_resource",
          "argsString": "()=default",
          "category": "functions",
          "const": false,
          "default": true,
          "definition": "virtual mr::memory_resource< Pointer >::~memory_resource",
          "deleted": false,
          "details": "Virtual destructor, defaulted when possible. ",
          "explicit": false,
          "fullname": "mr::memory_resource::~memory_resource",
          "hasDetails": true,
          "inline": false,
          "kind": "function",
          "location": {
            "column": 13,
            "file": "thrust/mr/memory_resource.h",
            "line": 57
          },
          "name": "~memory_resource",
          "override": false,
          "params": [],
          "pureVirtual": false,
          "refid": "classmr_1_1memory__resource_1a4f3ce6e89a6690d9c5b2eced397475b5",
          "static": false,
          "strong": false,
          "title": "~memory_resource",
          "url": "/thrust/api/classes/classmr_1_1memory__resource.html#function-~memory_resource",
          "virtual": true,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-allocate",
          "argsString": "(std::size_t bytes, std::size_t alignment=alignof(std::max_align_t))",
          "category": "functions",
          "const": false,
          "default": false,
          "definition": "pointer mr::memory_resource< Pointer >::allocate",
          "deleted": false,
          "details": "Allocates memory of size at least <code>bytes</code> and alignment at least <code>alignment</code>.",
          "exceptionsList": [
            {
              "name": "thrust::bad_alloc",
              "text": "when no memory with requested size and alignment can be allocated. "
            }
          ],
          "explicit": false,
          "fullname": "mr::memory_resource::allocate",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "location": {
            "bodyEnd": 70,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 67,
            "column": 13,
            "file": "thrust/mr/memory_resource.h",
            "line": 67
          },
          "name": "allocate",
          "override": false,
          "paramList": [
            {
              "name": "bytes",
              "text": "size, in bytes, that is requested from this allocation "
            },
            {
              "name": "alignment",
              "text": "alignment that is requested from this allocation "
            }
          ],
          "params": [
            {
              "name": "bytes",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            },
            {
              "defval": "alignof(std::max_align_t)",
              "defvalPlain": "alignof(std::max_align_t)",
              "name": "alignment",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            }
          ],
          "pureVirtual": false,
          "refid": "classmr_1_1memory__resource_1afcc350d74d7a1a9cf1efa30c79224d6f",
          "returns": [
            "A pointer to void to the newly allocated memory. "
          ],
          "static": false,
          "strong": false,
          "title": "allocate",
          "type": "<a href=\"/thrust/api/classes/classmr_1_1memory__resource.html#typedef-pointer\">pointer</a>",
          "typePlain": "pointer",
          "url": "/thrust/api/classes/classmr_1_1memory__resource.html#function-allocate",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-deallocate",
          "argsString": "(pointer p, std::size_t bytes, std::size_t alignment=alignof(std::max_align_t))",
          "category": "functions",
          "const": false,
          "default": false,
          "definition": "void mr::memory_resource< Pointer >::deallocate",
          "deleted": false,
          "details": "Deallocates memory pointed to by <code>p</code>.",
          "explicit": false,
          "fullname": "mr::memory_resource::deallocate",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "location": {
            "bodyEnd": 83,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 80,
            "column": 10,
            "file": "thrust/mr/memory_resource.h",
            "line": 80
          },
          "name": "deallocate",
          "override": false,
          "paramList": [
            {
              "name": "p",
              "text": "pointer to be deallocated "
            },
            {
              "name": "bytes",
              "text": "the size of the allocation. This must be equivalent to the value of <code>bytes</code> that was passed to the allocation function that returned <code>p</code>. "
            },
            {
              "name": "alignment",
              "text": "the alignment of the allocation. This must be equivalent to the value of <code>alignment</code> that was passed to the allocation function that returned <code>p</code>. "
            }
          ],
          "params": [
            {
              "name": "p",
              "type": "<a href=\"/thrust/api/classes/classmr_1_1memory__resource.html#typedef-pointer\">pointer</a>",
              "typePlain": "pointer"
            },
            {
              "name": "bytes",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            },
            {
              "defval": "alignof(std::max_align_t)",
              "defvalPlain": "alignof(std::max_align_t)",
              "name": "alignment",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            }
          ],
          "pureVirtual": false,
          "refid": "classmr_1_1memory__resource_1a19428f748cea54a8c86aa31244c85edd",
          "static": false,
          "strong": false,
          "title": "deallocate",
          "type": "void",
          "typePlain": "void",
          "url": "/thrust/api/classes/classmr_1_1memory__resource.html#function-deallocate",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-is_equal",
          "argsString": "(const memory_resource &other) const noexcept",
          "category": "functions",
          "const": true,
          "default": false,
          "definition": "__host__ __device__ bool mr::memory_resource< Pointer >::is_equal",
          "deleted": false,
          "details": "Compares this resource to the other one. The default implementation uses identity comparison, which is often the right thing to do and doesn't require RTTI involvement.",
          "explicit": false,
          "fullname": "mr::memory_resource::is_equal",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "location": {
            "bodyEnd": 95,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 92,
            "column": 10,
            "file": "thrust/mr/memory_resource.h",
            "line": 92
          },
          "name": "is_equal",
          "override": false,
          "paramList": [
            {
              "name": "other",
              "text": "the other resource to compare this resource to "
            }
          ],
          "params": [
            {
              "name": "other",
              "type": "const <a href=\"/thrust/api/classes/classmr_1_1memory__resource.html\">memory_resource</a> &",
              "typePlain": "const memory_resource &"
            }
          ],
          "pureVirtual": false,
          "refid": "classmr_1_1memory__resource_1aefccecd23a68e0236a20a78275c9da92",
          "returns": [
            "whether the two resources are equivalent. "
          ],
          "static": false,
          "strong": false,
          "title": "is_equal",
          "type": "__host__ __device__ bool",
          "typePlain": "__host__ __device__ bool",
          "url": "/thrust/api/classes/classmr_1_1memory__resource.html#function-is_equal",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-do_is_equal",
          "argsString": "(const memory_resource &other) const noexcept",
          "category": "functions",
          "const": true,
          "default": false,
          "definition": "__host__ virtual __device__ bool mr::memory_resource< Pointer >::do_is_equal",
          "deleted": false,
          "details": "Compares this resource to the other one. The default implementation uses identity comparison, which is often the right thing to do and doesn't require RTTI involvement.",
          "explicit": false,
          "fullname": "mr::memory_resource::do_is_equal",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "location": {
            "bodyEnd": 126,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 123,
            "column": 18,
            "file": "thrust/mr/memory_resource.h",
            "line": 123
          },
          "name": "do_is_equal",
          "override": false,
          "paramList": [
            {
              "name": "other",
              "text": "the other resource to compare this resource to "
            }
          ],
          "params": [
            {
              "name": "other",
              "type": "const <a href=\"/thrust/api/classes/classmr_1_1memory__resource.html\">memory_resource</a> &",
              "typePlain": "const memory_resource &"
            }
          ],
          "pureVirtual": false,
          "refid": "classmr_1_1memory__resource_1a6b484c618a6c5bcf3e3b9f6926d72ed5",
          "returns": [
            "whether the two resources are equivalent. "
          ],
          "static": false,
          "strong": false,
          "title": "do_is_equal",
          "type": "__host__ virtual __device__ bool",
          "typePlain": "__host__ virtual __device__ bool",
          "url": "/thrust/api/classes/classmr_1_1memory__resource.html#function-do_is_equal",
          "virtual": true,
          "visibility": "public"
        }
      ],
      "publicTypes": [
        {
          "abstract": false,
          "anchor": "#typedef-pointer",
          "category": "types",
          "const": false,
          "definition": "typedef Pointer mr::memory_resource< Pointer >::pointer",
          "details": "Alias for the template parameter. ",
          "explicit": false,
          "fullname": "mr::memory_resource::pointer",
          "hasDetails": true,
          "inline": false,
          "kind": "typedef",
          "location": {
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 53,
            "column": 21,
            "file": "thrust/mr/memory_resource.h",
            "line": 53
          },
          "name": "pointer",
          "override": false,
          "refid": "classmr_1_1memory__resource_1a850cab063deba2dbde9f8ad30ae8c9ad",
          "static": false,
          "strong": false,
          "title": "pointer",
          "type": "Pointer",
          "typePlain": "Pointer",
          "url": "/thrust/api/classes/classmr_1_1memory__resource.html#typedef-pointer",
          "visibility": "public"
        }
      ],
      "refid": "classmr_1_1memory__resource",
      "url": "/thrust/api/classes/classmr_1_1memory__resource.html",
      "virtual": "non-virtual",
      "visibility": "public"
    },
    {
      "external": true,
      "name": "mr::validator< Upstream >",
      "refid": null,
      "virtual": "non-virtual",
      "visibility": "private"
    }
  ],
  "category": "classes",
  "const": false,
  "definition": "",
  "details": "A memory resource adaptor allowing for pooling and caching allocations from <code>Upstream</code>, using memory allocated from it for both blocks then allocated to the user and for internal bookkeeping of the cached memory.\n\nOn a typical memory resource, calls to <code>allocate</code> and <code>deallocate</code> actually allocate and deallocate memory. Pooling memory resources only allocate and deallocate memory from an external resource (the upstream memory resource) when there's no suitable memory currently cached; otherwise, they use memory they have acquired beforehand, to make memory allocation faster and more efficient.\n\nThe non-disjoint version of the pool resource uses a single upstream memory resource. Every allocation is larger than strictly necessary to fulfill the end-user's request, because it needs to account for the memory overhead of tracking the memory blocks and chunks inside those same memory regions. Nevertheless, this version should be more memory-efficient than the <code><a href=\"/thrust/api/classes/classmr_1_1disjoint__unsynchronized__pool__resource.html\">disjoint&#95;unsynchronized&#95;pool&#95;resource</a></code>, because it doesn't need to allocate additional blocks of memory from a separate resource, which in turn would necessitate the bookkeeping overhead in the upstream resource.\n\nThis version requires that memory allocated from Upstream is accessible from device. It supports smart references, meaning that the non-managed CUDA resource, returning a device-tagged pointer, will work, but will be much less efficient than the disjoint version, which wouldn't need to touch device memory at all, and therefore wouldn't need to transfer it back and forth between the host and the device whenever an allocation or a deallocation happens.",
  "explicit": false,
  "fullname": "mr::unsynchronized_pool_resource",
  "hasAdditionalMembers": true,
  "hasDetails": true,
  "includes": "<thrust/mr/pool.h>",
  "inline": false,
  "kind": "class",
  "location": {
    "bodyEnd": 500,
    "bodyFile": "thrust/mr/pool.h",
    "bodyStart": 68,
    "column": 1,
    "file": "thrust/mr/pool.h",
    "line": 71
  },
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "memory_resources",
    "kind": "group",
    "name": "memory_resources",
    "refid": "group__memory__resources",
    "title": "Memory Resources",
    "url": "/thrust/api/groups/group__memory__resources.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "brief": "All Thrust functionalities related to memory allocation and deallocation. ",
      "category": "modules",
      "fullname": "memory_management",
      "kind": "group",
      "name": "memory_management",
      "refid": "group__memory__management",
      "summary": "All Thrust functionalities related to memory allocation and deallocation. ",
      "title": "Memory Management",
      "url": "/thrust/api/groups/group__memory__management.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "memory_resources",
      "kind": "group",
      "name": "memory_resources",
      "refid": "group__memory__resources",
      "title": "Memory Resources",
      "url": "/thrust/api/groups/group__memory__resources.html",
      "visibility": "public"
    }
  ],
  "name": "mr::unsynchronized_pool_resource",
  "override": false,
  "parent": {
    "anchor": "",
    "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
    "category": "namespaces",
    "fullname": "mr",
    "kind": "namespace",
    "name": "mr",
    "refid": "namespacemr",
    "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
    "title": "mr",
    "url": "/thrust/api/namespaces/namespacemr.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
      "category": "namespaces",
      "fullname": "mr",
      "kind": "namespace",
      "name": "mr",
      "refid": "namespacemr",
      "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
      "title": "mr",
      "url": "/thrust/api/namespaces/namespacemr.html",
      "visibility": "public"
    }
  ],
  "privateAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-m_upstream",
      "category": "attributes",
      "const": false,
      "definition": "Upstream* mr::unsynchronized_pool_resource< Upstream >::m_upstream",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::m_upstream",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 202,
        "column": 15,
        "file": "thrust/mr/pool.h",
        "line": 202
      },
      "name": "m_upstream",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1ac122a9e9c0459dcdc9d7ea969725cd85",
      "static": false,
      "strong": false,
      "title": "m_upstream",
      "type": "Upstream *",
      "typePlain": "Upstream *",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#variable-m_upstream",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_options",
      "category": "attributes",
      "const": false,
      "definition": "pool_options mr::unsynchronized_pool_resource< Upstream >::m_options",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::m_options",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 204,
        "column": 18,
        "file": "thrust/mr/pool.h",
        "line": 204
      },
      "name": "m_options",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1afe8b8f37ffd4cce48c511bd758f7183f",
      "static": false,
      "strong": false,
      "title": "m_options",
      "type": "<a href=\"/thrust/api/classes/structmr_1_1pool__options.html\">pool_options</a>",
      "typePlain": "pool_options",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#variable-m_options",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_smallest_block_log2",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::unsynchronized_pool_resource< Upstream >::m_smallest_block_log2",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::m_smallest_block_log2",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 205,
        "column": 17,
        "file": "thrust/mr/pool.h",
        "line": 205
      },
      "name": "m_smallest_block_log2",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1ad1065ed1402c41dd9bc8445d54ed115f",
      "static": false,
      "strong": false,
      "title": "m_smallest_block_log2",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#variable-m_smallest_block_log2",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_pools",
      "category": "attributes",
      "const": false,
      "definition": "pool_vector mr::unsynchronized_pool_resource< Upstream >::m_pools",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::m_pools",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 207,
        "column": 17,
        "file": "thrust/mr/pool.h",
        "line": 207
      },
      "name": "m_pools",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a9b4fe38e05d29eb107a43742eaaa03d3",
      "static": false,
      "strong": false,
      "title": "m_pools",
      "type": "pool_vector",
      "typePlain": "pool_vector",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#variable-m_pools",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_allocated",
      "category": "attributes",
      "const": false,
      "definition": "chunk_descriptor_ptr mr::unsynchronized_pool_resource< Upstream >::m_allocated",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::m_allocated",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 208,
        "column": 26,
        "file": "thrust/mr/pool.h",
        "line": 208
      },
      "name": "m_allocated",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a37e2d8b9f846ab633e9c6008354310f4",
      "static": false,
      "strong": false,
      "title": "m_allocated",
      "type": "chunk_descriptor_ptr",
      "typePlain": "chunk_descriptor_ptr",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#variable-m_allocated",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_oversized",
      "category": "attributes",
      "const": false,
      "definition": "oversized_block_descriptor_ptr mr::unsynchronized_pool_resource< Upstream >::m_oversized",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::m_oversized",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 209,
        "column": 36,
        "file": "thrust/mr/pool.h",
        "line": 209
      },
      "name": "m_oversized",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a5ed496c76f01d20f4084b74bbd3acba4",
      "static": false,
      "strong": false,
      "title": "m_oversized",
      "type": "oversized_block_descriptor_ptr",
      "typePlain": "oversized_block_descriptor_ptr",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#variable-m_oversized",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m_cached_oversized",
      "category": "attributes",
      "const": false,
      "definition": "oversized_block_descriptor_ptr mr::unsynchronized_pool_resource< Upstream >::m_cached_oversized",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::m_cached_oversized",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 210,
        "column": 36,
        "file": "thrust/mr/pool.h",
        "line": 210
      },
      "name": "m_cached_oversized",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a504fb6e145cab70946d92c72b26d8933",
      "static": false,
      "strong": false,
      "title": "m_cached_oversized",
      "type": "oversized_block_descriptor_ptr",
      "typePlain": "oversized_block_descriptor_ptr",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#variable-m_cached_oversized",
      "visibility": "private"
    }
  ],
  "privateClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "mr::unsynchronized_pool_resource::block_descriptor",
      "kind": "struct",
      "name": "mr::unsynchronized_pool_resource::block_descriptor",
      "refid": "structmr_1_1unsynchronized__pool__resource_1_1block__descriptor",
      "title": "mr::unsynchronized_pool_resource::block_descriptor",
      "url": "/thrust/api/classes/structmr_1_1unsynchronized__pool__resource_1_1block__descriptor.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "mr::unsynchronized_pool_resource::chunk_descriptor",
      "kind": "struct",
      "name": "mr::unsynchronized_pool_resource::chunk_descriptor",
      "refid": "structmr_1_1unsynchronized__pool__resource_1_1chunk__descriptor",
      "title": "mr::unsynchronized_pool_resource::chunk_descriptor",
      "url": "/thrust/api/classes/structmr_1_1unsynchronized__pool__resource_1_1chunk__descriptor.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "mr::unsynchronized_pool_resource::oversized_block_descriptor",
      "kind": "struct",
      "name": "mr::unsynchronized_pool_resource::oversized_block_descriptor",
      "refid": "structmr_1_1unsynchronized__pool__resource_1_1oversized__block__descriptor",
      "title": "mr::unsynchronized_pool_resource::oversized_block_descriptor",
      "url": "/thrust/api/classes/structmr_1_1unsynchronized__pool__resource_1_1oversized__block__descriptor.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "mr::unsynchronized_pool_resource::pool",
      "kind": "struct",
      "name": "mr::unsynchronized_pool_resource::pool",
      "refid": "structmr_1_1unsynchronized__pool__resource_1_1pool",
      "title": "mr::unsynchronized_pool_resource::pool",
      "url": "/thrust/api/classes/structmr_1_1unsynchronized__pool__resource_1_1pool.html",
      "visibility": "private"
    }
  ],
  "privateTypes": [
    {
      "abstract": false,
      "anchor": "#typedef-void_ptr",
      "category": "types",
      "const": false,
      "definition": "typedef Upstream::pointer mr::unsynchronized_pool_resource< Upstream >::void_ptr",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::void_ptr",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 148,
        "column": 40,
        "file": "thrust/mr/pool.h",
        "line": 148
      },
      "name": "void_ptr",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1afad13f9f93b4724a8f614b05c9fbb231",
      "static": false,
      "strong": false,
      "title": "void_ptr",
      "type": "Upstream::pointer",
      "typePlain": "Upstream::pointer",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#typedef-void_ptr",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-char_ptr",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<void_ptr>::template rebind<char>::other mr::unsynchronized_pool_resource< Upstream >::char_ptr",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::char_ptr",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 149,
        "column": 79,
        "file": "thrust/mr/pool.h",
        "line": 149
      },
      "name": "char_ptr",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a27832f8ae1188d2c3773ed2f4afd4da4",
      "static": false,
      "strong": false,
      "title": "char_ptr",
      "type": "thrust::detail::pointer_traits< void_ptr >::template rebind< char >::other",
      "typePlain": "thrust::detail::pointer_traits< void_ptr >::template rebind< char >::other",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#typedef-char_ptr",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-block_descriptor_ptr",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<void_ptr>::template rebind<block_descriptor>::other mr::unsynchronized_pool_resource< Upstream >::block_descriptor_ptr",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::block_descriptor_ptr",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 153,
        "column": 79,
        "file": "thrust/mr/pool.h",
        "line": 155
      },
      "name": "block_descriptor_ptr",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a210f8bfbfef15c9c69ddc0bd139a8a5d",
      "static": false,
      "strong": false,
      "title": "block_descriptor_ptr",
      "type": "thrust::detail::pointer_traits< void_ptr >::template rebind< block_descriptor >::other",
      "typePlain": "thrust::detail::pointer_traits< void_ptr >::template rebind< block_descriptor >::other",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#typedef-block_descriptor_ptr",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-chunk_descriptor_ptr",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<void_ptr>::template rebind<chunk_descriptor>::other mr::unsynchronized_pool_resource< Upstream >::chunk_descriptor_ptr",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::chunk_descriptor_ptr",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 156,
        "column": 79,
        "file": "thrust/mr/pool.h",
        "line": 156
      },
      "name": "chunk_descriptor_ptr",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1aac24e8db136e618fd03518f987454a9b",
      "static": false,
      "strong": false,
      "title": "chunk_descriptor_ptr",
      "type": "thrust::detail::pointer_traits< void_ptr >::template rebind< chunk_descriptor >::other",
      "typePlain": "thrust::detail::pointer_traits< void_ptr >::template rebind< chunk_descriptor >::other",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#typedef-chunk_descriptor_ptr",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-oversized_block_descriptor_ptr",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<void_ptr>::template rebind<oversized_block_descriptor>::other mr::unsynchronized_pool_resource< Upstream >::oversized_block_descriptor_ptr",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::oversized_block_descriptor_ptr",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 157,
        "column": 79,
        "file": "thrust/mr/pool.h",
        "line": 157
      },
      "name": "oversized_block_descriptor_ptr",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a5ebd2c0ca6a46a0bb332f1ab90b452bb",
      "static": false,
      "strong": false,
      "title": "oversized_block_descriptor_ptr",
      "type": "thrust::detail::pointer_traits< void_ptr >::template rebind< oversized_block_descriptor >::other",
      "typePlain": "thrust::detail::pointer_traits< void_ptr >::template rebind< oversized_block_descriptor >::other",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#typedef-oversized_block_descriptor_ptr",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-pool_vector",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::host_vector< pool, allocator<pool, Upstream> > mr::unsynchronized_pool_resource< Upstream >::pool_vector",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::pool_vector",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 200,
        "column": 2,
        "file": "thrust/mr/pool.h",
        "line": 200
      },
      "name": "pool_vector",
      "override": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a0f85f2978d61daf9714aaa359a6f73af",
      "static": false,
      "strong": false,
      "title": "pool_vector",
      "type": "thrust::host_vector< pool, <a href=\"/thrust/api/classes/classmr_1_1allocator.html\">allocator</a>< pool, Upstream > >",
      "typePlain": "thrust::host_vector< pool, allocator< pool, Upstream > >",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#typedef-pool_vector",
      "visibility": "private"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-get_default_options",
      "argsString": "()",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "static pool_options mr::unsynchronized_pool_resource< Upstream >::get_default_options",
      "deleted": false,
      "details": "Get the default options for a pool. These are meant to be a sensible set of values for many use cases, and as such, may be tuned in the future. This function is exposed so that creating a set of options that are just a slight departure from the defaults is easy. ",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::get_default_options",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 97,
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 77,
        "column": 25,
        "file": "thrust/mr/pool.h",
        "line": 77
      },
      "name": "get_default_options",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1afff74bcb9e7a9333dd3a7399a5ed270a",
      "static": true,
      "strong": false,
      "title": "get_default_options",
      "type": "<a href=\"/thrust/api/classes/structmr_1_1pool__options.html\">pool_options</a>",
      "typePlain": "pool_options",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#function-get_default_options",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unsynchronized_pool_resource",
      "argsString": "(Upstream *upstream, pool_options options=get_default_options())",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "mr::unsynchronized_pool_resource< Upstream >::unsynchronized_pool_resource",
      "deleted": false,
      "details": "Constructor.",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::unsynchronized_pool_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 117,
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 104,
        "column": 5,
        "file": "thrust/mr/pool.h",
        "line": 104
      },
      "name": "unsynchronized_pool_resource",
      "override": false,
      "paramList": [
        {
          "name": "upstream",
          "text": "the upstream memory resource for allocations "
        },
        {
          "name": "options",
          "text": "pool options to use "
        }
      ],
      "params": [
        {
          "name": "upstream",
          "type": "Upstream *",
          "typePlain": "Upstream *"
        },
        {
          "defval": "<a href=\"/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#function-get_default_options\">get_default_options</a>()",
          "defvalPlain": "get_default_options()",
          "name": "options",
          "type": "<a href=\"/thrust/api/classes/structmr_1_1pool__options.html\">pool_options</a>",
          "typePlain": "pool_options"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a8040b9dd59b684afb5cea90d88a8d571",
      "static": false,
      "strong": false,
      "title": "unsynchronized_pool_resource",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#function-unsynchronized_pool_resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unsynchronized_pool_resource",
      "argsString": "(pool_options options=get_default_options())",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "mr::unsynchronized_pool_resource< Upstream >::unsynchronized_pool_resource",
      "deleted": false,
      "details": "Constructor. The upstream resource is obtained by calling <code>get&#95;global&#95;resource&lt;Upstream&gt;</code>.",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::unsynchronized_pool_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 138,
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 125,
        "column": 5,
        "file": "thrust/mr/pool.h",
        "line": 125
      },
      "name": "unsynchronized_pool_resource",
      "override": false,
      "paramList": [
        {
          "name": "options",
          "text": "pool options to use "
        }
      ],
      "params": [
        {
          "defval": "<a href=\"/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#function-get_default_options\">get_default_options</a>()",
          "defvalPlain": "get_default_options()",
          "name": "options",
          "type": "<a href=\"/thrust/api/classes/structmr_1_1pool__options.html\">pool_options</a>",
          "typePlain": "pool_options"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1adeaeecd4ad5a99a1db0770b2b7c1d560",
      "static": false,
      "strong": false,
      "title": "unsynchronized_pool_resource",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#function-unsynchronized_pool_resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-~unsynchronized_pool_resource",
      "argsString": "()",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "mr::unsynchronized_pool_resource< Upstream >::~unsynchronized_pool_resource",
      "deleted": false,
      "details": "Destructor. Releases all held memory to upstream. ",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::~unsynchronized_pool_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 145,
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 142,
        "column": 5,
        "file": "thrust/mr/pool.h",
        "line": 142
      },
      "name": "~unsynchronized_pool_resource",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a933e74349b0e6a77e5cc45684b0077a2",
      "static": false,
      "strong": false,
      "title": "~unsynchronized_pool_resource",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#function-~unsynchronized_pool_resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-release",
      "argsString": "()",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void mr::unsynchronized_pool_resource< Upstream >::release",
      "deleted": false,
      "details": "Releases all held memory to upstream. ",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::release",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 253,
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 215,
        "column": 10,
        "file": "thrust/mr/pool.h",
        "line": 215
      },
      "name": "release",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a66ba0fb7527792bc7b9c134033102d4a",
      "static": false,
      "strong": false,
      "title": "release",
      "type": "void",
      "typePlain": "void",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#function-release",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-do_allocate",
      "argsString": "(std::size_t bytes, std::size_t alignment=alignof(std::max_align_t)) override",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "virtual void_ptr mr::unsynchronized_pool_resource< Upstream >::do_allocate",
      "deleted": false,
      "details": "Allocates memory of size at least <code>bytes</code> and alignment at least <code>alignment</code>.",
      "exceptionsList": [
        {
          "name": "thrust::bad_alloc",
          "text": "when no memory with requested size and alignment can be allocated. "
        }
      ],
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::do_allocate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 426,
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 255,
        "column": 23,
        "file": "thrust/mr/pool.h",
        "line": 255
      },
      "name": "do_allocate",
      "override": true,
      "paramList": [
        {
          "name": "bytes",
          "text": "size, in bytes, that is requested from this allocation "
        },
        {
          "name": "alignment",
          "text": "alignment that is requested from this allocation "
        }
      ],
      "params": [
        {
          "name": "bytes",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        },
        {
          "defval": "alignof(std::max_align_t)",
          "defvalPlain": "alignof(std::max_align_t)",
          "name": "alignment",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1af63367e1861f264fb3b931e8e15e9faf",
      "reimplements": {
        "anchor": "#function-do_allocate",
        "category": "functions",
        "fullname": "mr::memory_resource::do_allocate",
        "kind": "function",
        "name": "do_allocate",
        "pureVirtual": true,
        "refid": "classmr_1_1memory__resource_1a166d253df9e98b69db8b3fc7f13716e3",
        "title": "do_allocate",
        "url": "/thrust/api/classes/classmr_1_1memory__resource.html#function-do_allocate",
        "virtual": true,
        "visibility": "public"
      },
      "returns": [
        "A pointer to void to the newly allocated memory. "
      ],
      "static": false,
      "strong": false,
      "title": "do_allocate",
      "type": "void_ptr",
      "typePlain": "void_ptr",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#function-do_allocate",
      "virtual": true,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-do_deallocate",
      "argsString": "(void_ptr p, std::size_t n, std::size_t alignment=alignof(std::max_align_t)) override",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "virtual void mr::unsynchronized_pool_resource< Upstream >::do_deallocate",
      "deleted": false,
      "details": "Deallocates memory pointed to by <code>p</code>.",
      "explicit": false,
      "fullname": "mr::unsynchronized_pool_resource::do_deallocate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 499,
        "bodyFile": "thrust/mr/pool.h",
        "bodyStart": 428,
        "column": 18,
        "file": "thrust/mr/pool.h",
        "line": 428
      },
      "name": "do_deallocate",
      "override": true,
      "paramList": [
        {
          "name": "p",
          "text": "pointer to be deallocated "
        },
        {
          "name": "bytes",
          "text": "the size of the allocation. This must be equivalent to the value of <code>bytes</code> that was passed to the allocation function that returned <code>p</code>. "
        },
        {
          "name": "alignment",
          "text": "the size of the allocation. This must be equivalent to the value of <code>alignment</code> that was passed to the allocation function that returned <code>p</code>. "
        }
      ],
      "params": [
        {
          "name": "p",
          "type": "void_ptr",
          "typePlain": "void_ptr"
        },
        {
          "name": "bytes",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        },
        {
          "defval": "alignof(std::max_align_t)",
          "defvalPlain": "alignof(std::max_align_t)",
          "name": "alignment",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "pureVirtual": false,
      "refid": "classmr_1_1unsynchronized__pool__resource_1a893026a59a1e0bfd5c6c6d69be0dd679",
      "reimplements": {
        "anchor": "#function-do_deallocate",
        "category": "functions",
        "fullname": "mr::memory_resource::do_deallocate",
        "kind": "function",
        "name": "do_deallocate",
        "pureVirtual": true,
        "refid": "classmr_1_1memory__resource_1adbc95e08e5e7ad5943ef6a82f7747336",
        "title": "do_deallocate",
        "url": "/thrust/api/classes/classmr_1_1memory__resource.html#function-do_deallocate",
        "virtual": true,
        "visibility": "public"
      },
      "static": false,
      "strong": false,
      "title": "do_deallocate",
      "type": "void",
      "typePlain": "void",
      "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html#function-do_deallocate",
      "virtual": true,
      "visibility": "public"
    }
  ],
  "refid": "classmr_1_1unsynchronized__pool__resource",
  "static": false,
  "strong": false,
  "templateParams": [
    {
      "name": "",
      "type": "typename Upstream",
      "typePlain": "typename Upstream"
    }
  ],
  "templateParamsList": [
    {
      "name": "Upstream",
      "text": "the type of memory resources that will be used for allocating memory blocks "
    }
  ],
  "title": "mr::unsynchronized_pool_resource",
  "url": "/thrust/api/classes/classmr_1_1unsynchronized__pool__resource.html",
  "visibility": "public"
}