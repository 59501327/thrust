{
  "abstract": false,
  "anchor": "",
  "category": "classes",
  "const": false,
  "definition": "",
  "details": "A type used for configuring pooling resource adaptors, to fine-tune their behavior and parameters. ",
  "explicit": false,
  "fullname": "mr::pool_options",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "includes": "<thrust/mr/pool_options.h>",
  "inline": false,
  "kind": "struct",
  "location": {
    "bodyEnd": 121,
    "bodyFile": "thrust/mr/pool_options.h",
    "bodyStart": 42,
    "column": 1,
    "file": "thrust/mr/pool_options.h",
    "line": 43
  },
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "memory_resources",
    "kind": "group",
    "name": "memory_resources",
    "refid": "group__memory__resources",
    "title": "Memory Resources",
    "url": "/api/groups/group__memory__resources.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "brief": "All Thrust functionalities related to memory allocation and deallocation. ",
      "category": "modules",
      "fullname": "memory_management",
      "kind": "group",
      "name": "memory_management",
      "refid": "group__memory__management",
      "summary": "All Thrust functionalities related to memory allocation and deallocation. ",
      "title": "Memory Management",
      "url": "/api/groups/group__memory__management.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "memory_resources",
      "kind": "group",
      "name": "memory_resources",
      "refid": "group__memory__resources",
      "title": "Memory Resources",
      "url": "/api/groups/group__memory__resources.html",
      "visibility": "public"
    }
  ],
  "name": "mr::pool_options",
  "override": false,
  "parent": {
    "anchor": "",
    "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
    "category": "namespaces",
    "fullname": "mr",
    "kind": "namespace",
    "name": "mr",
    "refid": "namespacemr",
    "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
    "title": "mr",
    "url": "/api/namespaces/namespacemr.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
      "category": "namespaces",
      "fullname": "mr",
      "kind": "namespace",
      "name": "mr",
      "refid": "namespacemr",
      "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
      "title": "mr",
      "url": "/api/namespaces/namespacemr.html",
      "visibility": "public"
    }
  ],
  "publicAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-min_blocks_per_chunk",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::pool_options::min_blocks_per_chunk",
      "details": "The minimal number of blocks, i.e. pieces of memory handed off to the user from a pool of a given size, in a single chunk allocated from upstream. ",
      "explicit": false,
      "fullname": "mr::pool_options::min_blocks_per_chunk",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 47,
        "column": 17,
        "file": "thrust/mr/pool_options.h",
        "line": 47
      },
      "name": "min_blocks_per_chunk",
      "override": false,
      "refid": "structmr_1_1pool__options_1ade61bf8826bdb933d2fa2931726956a0",
      "static": false,
      "strong": false,
      "title": "min_blocks_per_chunk",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/api/classes/structmr_1_1pool__options.html#variable-min_blocks_per_chunk",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-min_bytes_per_chunk",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::pool_options::min_bytes_per_chunk",
      "details": "The minimal number of bytes in a single chunk allocated from upstream. ",
      "explicit": false,
      "fullname": "mr::pool_options::min_bytes_per_chunk",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 50,
        "column": 17,
        "file": "thrust/mr/pool_options.h",
        "line": 50
      },
      "name": "min_bytes_per_chunk",
      "override": false,
      "refid": "structmr_1_1pool__options_1ae0c9c9167b7eac6327b65e826868a83b",
      "static": false,
      "strong": false,
      "title": "min_bytes_per_chunk",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/api/classes/structmr_1_1pool__options.html#variable-min_bytes_per_chunk",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-max_blocks_per_chunk",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::pool_options::max_blocks_per_chunk",
      "details": "The maximal number of blocks, i.e. pieces of memory handed off to the user from a pool of a given size, in a single chunk allocated from upstream. ",
      "explicit": false,
      "fullname": "mr::pool_options::max_blocks_per_chunk",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 54,
        "column": 17,
        "file": "thrust/mr/pool_options.h",
        "line": 54
      },
      "name": "max_blocks_per_chunk",
      "override": false,
      "refid": "structmr_1_1pool__options_1ac7875d2e4bed7537a64ad9360006ee54",
      "static": false,
      "strong": false,
      "title": "max_blocks_per_chunk",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/api/classes/structmr_1_1pool__options.html#variable-max_blocks_per_chunk",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-max_bytes_per_chunk",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::pool_options::max_bytes_per_chunk",
      "details": "The maximal number of bytes in a single chunk allocated from upstream. ",
      "explicit": false,
      "fullname": "mr::pool_options::max_bytes_per_chunk",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 57,
        "column": 17,
        "file": "thrust/mr/pool_options.h",
        "line": 57
      },
      "name": "max_bytes_per_chunk",
      "override": false,
      "refid": "structmr_1_1pool__options_1a441faf2b0cb49564fe1f2feb78924cf9",
      "static": false,
      "strong": false,
      "title": "max_bytes_per_chunk",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/api/classes/structmr_1_1pool__options.html#variable-max_bytes_per_chunk",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-smallest_block_size",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::pool_options::smallest_block_size",
      "details": "The size of blocks in the smallest pool covered by the pool resource. All allocation requests below this size will be rounded up to this size. ",
      "explicit": false,
      "fullname": "mr::pool_options::smallest_block_size",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 62,
        "column": 17,
        "file": "thrust/mr/pool_options.h",
        "line": 62
      },
      "name": "smallest_block_size",
      "override": false,
      "refid": "structmr_1_1pool__options_1a5243d98b7f41e7a38b22a322a80a8dd5",
      "static": false,
      "strong": false,
      "title": "smallest_block_size",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/api/classes/structmr_1_1pool__options.html#variable-smallest_block_size",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-largest_block_size",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::pool_options::largest_block_size",
      "details": "The size of blocks in the largest pool covered by the pool resource. All allocation requests above this size will be considered oversized, allocated directly from upstream (and not from a pool), and cached only of <code>cache&#95;oversized</code> is true. ",
      "explicit": false,
      "fullname": "mr::pool_options::largest_block_size",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 67,
        "column": 17,
        "file": "thrust/mr/pool_options.h",
        "line": 67
      },
      "name": "largest_block_size",
      "override": false,
      "refid": "structmr_1_1pool__options_1a3da4bc948620ff665a86e68dbaab3450",
      "static": false,
      "strong": false,
      "title": "largest_block_size",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/api/classes/structmr_1_1pool__options.html#variable-largest_block_size",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-alignment",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::pool_options::alignment",
      "details": "The alignment of all blocks in internal pools of the pool resource. All allocation requests above this alignment will be considered oversized, allocated directly from upstream (and not from a pool), and cached only of <code>cache&#95;oversized</code> is true. ",
      "explicit": false,
      "fullname": "mr::pool_options::alignment",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 73,
        "column": 17,
        "file": "thrust/mr/pool_options.h",
        "line": 73
      },
      "name": "alignment",
      "override": false,
      "refid": "structmr_1_1pool__options_1a2bd4f4b7dc4fbf14d07098e0ca7b9662",
      "static": false,
      "strong": false,
      "title": "alignment",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/api/classes/structmr_1_1pool__options.html#variable-alignment",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-cache_oversized",
      "category": "attributes",
      "const": false,
      "definition": "bool mr::pool_options::cache_oversized",
      "details": "Decides whether oversized and overaligned blocks are cached for later use, or immediately return it to the upstream resource. ",
      "explicit": false,
      "fullname": "mr::pool_options::cache_oversized",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 78,
        "column": 10,
        "file": "thrust/mr/pool_options.h",
        "line": 78
      },
      "name": "cache_oversized",
      "override": false,
      "refid": "structmr_1_1pool__options_1a24a48cd700cac575dc4db9d9d63f6ba2",
      "static": false,
      "strong": false,
      "title": "cache_oversized",
      "type": "bool",
      "typePlain": "bool",
      "url": "/api/classes/structmr_1_1pool__options.html#variable-cache_oversized",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-cached_size_cutoff_factor",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::pool_options::cached_size_cutoff_factor",
      "details": "The size factor at which a cached allocation is considered too ridiculously oversized to use to fulfill an allocation request. For instance: the user requests an allocation of size 1024 bytes. A block of size 32 * 1024 bytes is cached. If <code>cached&#95;size&#95;cutoff&#95;factor</code> is 32 or less, this block will be considered too big for that allocation request. ",
      "explicit": false,
      "fullname": "mr::pool_options::cached_size_cutoff_factor",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 85,
        "column": 17,
        "file": "thrust/mr/pool_options.h",
        "line": 85
      },
      "name": "cached_size_cutoff_factor",
      "override": false,
      "refid": "structmr_1_1pool__options_1a04fdf3a8976c47fb289b5d3ee98a7599",
      "static": false,
      "strong": false,
      "title": "cached_size_cutoff_factor",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/api/classes/structmr_1_1pool__options.html#variable-cached_size_cutoff_factor",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-cached_alignment_cutoff_factor",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t mr::pool_options::cached_alignment_cutoff_factor",
      "details": "The alignment factor at which a cached allocation is considered too ridiculously overaligned to use to fulfill an allocation request. For instance: the user requests an allocation aligned to 32 bytes. A block aligned to 1024 bytes is cached. If <code>cached&#95;size&#95;cutoff&#95;factor</code> is 32 or less, this block will be considered too overaligned for that allocation request. ",
      "explicit": false,
      "fullname": "mr::pool_options::cached_alignment_cutoff_factor",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 91,
        "column": 17,
        "file": "thrust/mr/pool_options.h",
        "line": 91
      },
      "name": "cached_alignment_cutoff_factor",
      "override": false,
      "refid": "structmr_1_1pool__options_1a8ceece43a489ffac59db1535491179b5",
      "static": false,
      "strong": false,
      "title": "cached_alignment_cutoff_factor",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "/api/classes/structmr_1_1pool__options.html#variable-cached_alignment_cutoff_factor",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-validate",
      "argsString": "() const",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "bool mr::pool_options::validate",
      "deleted": false,
      "details": "Checks if the options are self-consistent.\n\n/returns true if the options are self-consitent, false otherwise. ",
      "explicit": false,
      "fullname": "mr::pool_options::validate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "location": {
        "bodyEnd": 120,
        "bodyFile": "thrust/mr/pool_options.h",
        "bodyStart": 97,
        "column": 10,
        "file": "thrust/mr/pool_options.h",
        "line": 97
      },
      "name": "validate",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "structmr_1_1pool__options_1a65f15d02f203747e95a3ff7634c6e459",
      "static": false,
      "strong": false,
      "title": "validate",
      "type": "bool",
      "typePlain": "bool",
      "url": "/api/classes/structmr_1_1pool__options.html#function-validate",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "refid": "structmr_1_1pool__options",
  "static": false,
  "strong": false,
  "title": "mr::pool_options",
  "url": "/api/classes/structmr_1_1pool__options.html",
  "visibility": "public"
}