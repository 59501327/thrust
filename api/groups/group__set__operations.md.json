{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "set_operations",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "algorithms",
    "kind": "group",
    "name": "algorithms",
    "refid": "group__algorithms",
    "title": "Algorithms",
    "url": "/api/groups/group__algorithms.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "name": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "/api/groups/group__algorithms.html",
      "visibility": "public"
    }
  ],
  "name": "set_operations",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "algorithms",
    "kind": "group",
    "name": "algorithms",
    "refid": "group__algorithms",
    "title": "Algorithms",
    "url": "/api/groups/group__algorithms.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "name": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "/api/groups/group__algorithms.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-set_difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator set_difference",
      "deleted": false,
      "details": "<code>set&#95;difference</code> constructs a sorted range that is the set difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;difference</code> performs the \"difference\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code> and not contained in <code>[first2, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[first1, last1)</code> range shall be copied to the output range.\n\nThis version of <code>set&#95;difference</code> compares elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference</code> to compute the set difference of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {0, 1, 3, 4, 5, 6, 9};\nint A2[5] = {1, 3, 5, 7, 9};\n\nint result[3];\n\nint *result_end = thrust::set_difference(thrust::host, A1, A1 + 7, A2, A2 + 5, result);\n// result is now {0, 4, 6}\n```",
      "explicit": false,
      "fullname": "set_operations::set_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 107
      },
      "name": "set_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga855116696ce931c060bff4c28c6b7e55",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_difference\">https://en.cppreference.com/w/cpp/algorithm/set_difference</a>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_difference",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator set_difference",
      "deleted": false,
      "details": "<code>set&#95;difference</code> constructs a sorted range that is the set difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;difference</code> performs the \"difference\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code> and not contained in <code>[first2, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[first1, last1)</code> range shall be copied to the output range.\n\nThis version of <code>set&#95;difference</code> compares elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference</code> to compute the set difference of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[7] = {0, 1, 3, 4, 5, 6, 9};\nint A2[5] = {1, 3, 5, 7, 9};\n\nint result[3];\n\nint *result_end = thrust::set_difference(A1, A1 + 7, A2, A2 + 5, result);\n// result is now {0, 4, 6}\n```",
      "explicit": false,
      "fullname": "set_operations::set_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 178
      },
      "name": "set_difference",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1gab7f5ee8efd0b86776ebdb69130c4f755",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_difference\">https://en.cppreference.com/w/cpp/algorithm/set_difference</a>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator set_difference",
      "deleted": false,
      "details": "<code>set&#95;difference</code> constructs a sorted range that is the set difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;difference</code> performs the \"difference\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code> and not contained in <code>[first2, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[first1, last1)</code> range shall be copied to the output range.\n\nThis version of <code>set&#95;difference</code> compares elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference</code> to compute the set difference of two sets of integers sorted in descending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {9, 6, 5, 4, 3, 1, 0};\nint A2[5] = {9, 7, 5, 3, 1};\n\nint result[3];\n\nint *result_end = thrust::set_difference(thrust::host, A1, A1 + 7, A2, A2 + 5, result, thrust::greater<int>());\n// result is now {6, 4, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 256
      },
      "name": "set_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga8a602246b4bca067ebbfe1f66a99f620",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_difference\">https://en.cppreference.com/w/cpp/algorithm/set_difference</a>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_difference",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator set_difference",
      "deleted": false,
      "details": "<code>set&#95;difference</code> constructs a sorted range that is the set difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;difference</code> performs the \"difference\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code> and not contained in <code>[first2, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[first1, last1)</code> range shall be copied to the output range.\n\nThis version of <code>set&#95;difference</code> compares elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference</code> to compute the set difference of two sets of integers sorted in descending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A1[7] = {9, 6, 5, 4, 3, 1, 0};\nint A2[5] = {9, 7, 5, 3, 1};\n\nint result[3];\n\nint *result_end = thrust::set_difference(A1, A1 + 7, A2, A2 + 5, result, thrust::greater<int>());\n// result is now {6, 4, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 328
      },
      "name": "set_difference",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga5ebf261171bba78575b1209dc975fe79",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_difference\">https://en.cppreference.com/w/cpp/algorithm/set_difference</a>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_intersection",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator set_intersection",
      "deleted": false,
      "details": "<code>set&#95;intersection</code> constructs a sorted range that is the intersection of sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;intersection</code> performs the \"intersection\" operation from set theory: the output range contains a copy of every element that is contained in both <code>[first1, last1)</code> and <code>[first2, last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if a value appears <code>m</code> times in <code>[first1, last1)</code> and <code>n</code> times in <code>[first2, last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the output range. <code>set&#95;intersection</code> is stable, meaning that both elements are copied from the first range rather than the second, and that the relative order of elements in the output range is the same as in the first input range.\n\nThis version of <code>set&#95;intersection</code> compares objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection</code> to compute the set intersection of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[6] = {1, 3, 5, 7, 9, 11};\nint A2[7] = {1, 1, 2, 3, 5,  8, 13};\n\nint result[7];\n\nint *result_end = thrust::set_intersection(thrust::host, A1, A1 + 6, A2, A2 + 7, result);\n// result is now {1, 3, 5}\n```",
      "explicit": false,
      "fullname": "set_operations::set_intersection",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 414
      },
      "name": "set_intersection",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1gad9dd93110acb315c63b0a6542be395a6",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_intersection\">https://en.cppreference.com/w/cpp/algorithm/set_intersection</a>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_intersection",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_intersection",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator set_intersection",
      "deleted": false,
      "details": "<code>set&#95;intersection</code> constructs a sorted range that is the intersection of sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;intersection</code> performs the \"intersection\" operation from set theory: the output range contains a copy of every element that is contained in both <code>[first1, last1)</code> and <code>[first2, last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if a value appears <code>m</code> times in <code>[first1, last1)</code> and <code>n</code> times in <code>[first2, last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the output range. <code>set&#95;intersection</code> is stable, meaning that both elements are copied from the first range rather than the second, and that the relative order of elements in the output range is the same as in the first input range.\n\nThis version of <code>set&#95;intersection</code> compares objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection</code> to compute the set intersection of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[6] = {1, 3, 5, 7, 9, 11};\nint A2[7] = {1, 1, 2, 3, 5,  8, 13};\n\nint result[7];\n\nint *result_end = thrust::set_intersection(A1, A1 + 6, A2, A2 + 7, result);\n// result is now {1, 3, 5}\n```",
      "explicit": false,
      "fullname": "set_operations::set_intersection",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 492
      },
      "name": "set_intersection",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga0c6aa2c84dfc9f00c3a35bc2b86f4730",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_intersection\">https://en.cppreference.com/w/cpp/algorithm/set_intersection</a>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_intersection",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_intersection",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator set_intersection",
      "deleted": false,
      "details": "<code>set&#95;intersection</code> constructs a sorted range that is the intersection of sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;intersection</code> performs the \"intersection\" operation from set theory: the output range contains a copy of every element that is contained in both <code>[first1, last1)</code> and <code>[first2, last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if a value appears <code>m</code> times in <code>[first1, last1)</code> and <code>n</code> times in <code>[first2, last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the output range. <code>set&#95;intersection</code> is stable, meaning that both elements are copied from the first range rather than the second, and that the relative order of elements in the output range is the same as in the first input range.\n\nThis version of <code>set&#95;intersection</code> compares elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection</code> to compute the set intersection of sets of integers sorted in descending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[6] = {11, 9, 7, 5, 3, 1};\nint A2[7] = {13, 8, 5, 3, 2,  1, 1};\n\nint result[3];\n\nint *result_end = thrust::set_intersection(thrust::host, A1, A1 + 6, A2, A2 + 7, result, thrust::greater<int>());\n// result is now {5, 3, 1}\n```",
      "explicit": false,
      "fullname": "set_operations::set_intersection",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 578
      },
      "name": "set_intersection",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga1983fb540d5267534eb2d13a1ca8de30",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_intersection\">https://en.cppreference.com/w/cpp/algorithm/set_intersection</a>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_intersection",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_intersection",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator set_intersection",
      "deleted": false,
      "details": "<code>set&#95;intersection</code> constructs a sorted range that is the intersection of sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;intersection</code> performs the \"intersection\" operation from set theory: the output range contains a copy of every element that is contained in both <code>[first1, last1)</code> and <code>[first2, last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if a value appears <code>m</code> times in <code>[first1, last1)</code> and <code>n</code> times in <code>[first2, last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the output range. <code>set&#95;intersection</code> is stable, meaning that both elements are copied from the first range rather than the second, and that the relative order of elements in the output range is the same as in the first input range.\n\nThis version of <code>set&#95;intersection</code> compares elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection</code> to compute the set intersection of sets of integers sorted in descending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[6] = {11, 9, 7, 5, 3, 1};\nint A2[7] = {13, 8, 5, 3, 2,  1, 1};\n\nint result[3];\n\nint *result_end = thrust::set_intersection(A1, A1 + 6, A2, A2 + 7, result, thrust::greater<int>());\n// result is now {5, 3, 1}\n```",
      "explicit": false,
      "fullname": "set_operations::set_intersection",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 658
      },
      "name": "set_intersection",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1gaa77b52bf41d0b12d4de0efbbca1c32e0",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_intersection\">https://en.cppreference.com/w/cpp/algorithm/set_intersection</a>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_intersection",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_symmetric_difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator set_symmetric_difference",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference</code> constructs a sorted range that is the set symmetric difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[first1, last1)</code> but not <code>[first2, last1)</code>, and a copy of every element that is contained in <code>[first2, last2)</code> but not <code>[first1, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[first2, last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[first1, last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[first2, last2)</code> if <code>m &lt; n</code>.\n\nThis version of <code>set&#95;union</code> compares elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference</code> to compute the symmetric difference of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {0, 1, 2, 2, 4, 6, 7};\nint A2[5] = {1, 1, 2, 5, 8};\n\nint result[6];\n\nint *result_end = thrust::set_symmetric_difference(thrust::host, A1, A1 + 7, A2, A2 + 5, result);\n// result = {0, 4, 5, 6, 7, 8}\n```",
      "explicit": false,
      "fullname": "set_operations::set_symmetric_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 741
      },
      "name": "set_symmetric_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga0677a7bac3982517d34a9a8cede1aa43",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference\">https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference</a>",
        "<code><a href=\"/api/groups/group__merging.html#function-merge\">merge</a></code>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference\">set&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_symmetric_difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_symmetric_difference",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator set_symmetric_difference",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference</code> constructs a sorted range that is the set symmetric difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[first1, last1)</code> but not <code>[first2, last1)</code>, and a copy of every element that is contained in <code>[first2, last2)</code> but not <code>[first1, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[first2, last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[first1, last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[first2, last2)</code> if <code>m &lt; n</code>.\n\nThis version of <code>set&#95;union</code> compares elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference</code> to compute the symmetric difference of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[7] = {0, 1, 2, 2, 4, 6, 7};\nint A2[5] = {1, 1, 2, 5, 8};\n\nint result[6];\n\nint *result_end = thrust::set_symmetric_difference(A1, A1 + 7, A2, A2 + 5, result);\n// result = {0, 4, 5, 6, 7, 8}\n```",
      "explicit": false,
      "fullname": "set_operations::set_symmetric_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 816
      },
      "name": "set_symmetric_difference",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga42e6f55caa5022aa8d8d570ce4d13ea2",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference\">https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference</a>",
        "<code><a href=\"/api/groups/group__merging.html#function-merge\">merge</a></code>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference\">set&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_symmetric_difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_symmetric_difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator set_symmetric_difference",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference</code> constructs a sorted range that is the set symmetric difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[first1, last1)</code> but not <code>[first2, last1)</code>, and a copy of every element that is contained in <code>[first2, last2)</code> but not <code>[first1, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[first2, last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[first1, last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[first2, last2)</code> if <code>m &lt; n</code>.\n\nThis version of <code>set&#95;union</code> compares elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference</code> to compute the symmetric difference of two sets of integers sorted in descending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {7, 6, 4, 2, 2, 1, 0};\nint A2[5] = {8, 5, 2, 1, 1};\n\nint result[6];\n\nint *result_end = thrust::set_symmetric_difference(thrust::host, A1, A1 + 7, A2, A2 + 5, result);\n// result = {8, 7, 6, 5, 4, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_symmetric_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 900
      },
      "name": "set_symmetric_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1gabb715560d468ad1c326ff8c0a79029f4",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference\">https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference</a>",
        "<code><a href=\"/api/groups/group__merging.html#function-merge\">merge</a></code>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference\">set&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_symmetric_difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_symmetric_difference",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator set_symmetric_difference",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference</code> constructs a sorted range that is the set symmetric difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[first1, last1)</code> but not <code>[first2, last1)</code>, and a copy of every element that is contained in <code>[first2, last2)</code> but not <code>[first1, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[first2, last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[first1, last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[first2, last2)</code> if <code>m &lt; n</code>.\n\nThis version of <code>set&#95;union</code> compares elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference</code> to compute the symmetric difference of two sets of integers sorted in descending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[7] = {7, 6, 4, 2, 2, 1, 0};\nint A2[5] = {8, 5, 2, 1, 1};\n\nint result[6];\n\nint *result_end = thrust::set_symmetric_difference(A1, A1 + 7, A2, A2 + 5, result);\n// result = {8, 7, 6, 5, 4, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_symmetric_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 978
      },
      "name": "set_symmetric_difference",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga0c5c6e353126199e76ecfb7bbb275306",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference\">https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference</a>",
        "<code><a href=\"/api/groups/group__merging.html#function-merge\">merge</a></code>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference\">set&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_symmetric_difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_union",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator set_union",
      "deleted": false,
      "details": "<code>set&#95;union</code> constructs a sorted range that is the union of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;union</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code>, <code>[first2, last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nThis version of <code>set&#95;union</code> compares elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;union</code> to compute the union of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {0, 2, 4, 6, 8, 10, 12};\nint A2[5] = {1, 3, 5, 7, 9};\n\nint result[11];\n\nint *result_end = thrust::set_union(thrust::host, A1, A1 + 7, A2, A2 + 5, result);\n// result = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12}\n```",
      "explicit": false,
      "fullname": "set_operations::set_union",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 1059
      },
      "name": "set_union",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga9f0d7750f96cf6a8743ce5156e22d302",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_union\">https://en.cppreference.com/w/cpp/algorithm/set_union</a>",
        "<code><a href=\"/api/groups/group__merging.html#function-merge\">merge</a></code>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_union",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_union",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_union",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator set_union",
      "deleted": false,
      "details": "<code>set&#95;union</code> constructs a sorted range that is the union of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;union</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code>, <code>[first2, last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nThis version of <code>set&#95;union</code> compares elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;union</code> to compute the union of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[7] = {0, 2, 4, 6, 8, 10, 12};\nint A2[5] = {1, 3, 5, 7, 9};\n\nint result[11];\n\nint *result_end = thrust::set_union(A1, A1 + 7, A2, A2 + 5, result);\n// result = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12}\n```",
      "explicit": false,
      "fullname": "set_operations::set_union",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 1132
      },
      "name": "set_union",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga95f618dcc296b8a87dd2c43e8df8362d",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_union\">https://en.cppreference.com/w/cpp/algorithm/set_union</a>",
        "<code><a href=\"/api/groups/group__merging.html#function-merge\">merge</a></code>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_union",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_union",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_union",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator set_union",
      "deleted": false,
      "details": "<code>set&#95;union</code> constructs a sorted range that is the union of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;union</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code>, <code>[first2, last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nThis version of <code>set&#95;union</code> compares elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;union</code> to compute the union of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {12, 10, 8, 6, 4, 2, 0};\nint A2[5] = {9, 7, 5, 3, 1};\n\nint result[11];\n\nint *result_end = thrust::set_union(thrust::host, A1, A1 + 7, A2, A2 + 5, result, thrust::greater<int>());\n// result = {12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_union",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 1212
      },
      "name": "set_union",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga123702fa5461a0a154626f238ff540e2",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_union\">https://en.cppreference.com/w/cpp/algorithm/set_union</a>",
        "<code><a href=\"/api/groups/group__merging.html#function-merge\">merge</a></code>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_union",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_union",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_union",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator set_union",
      "deleted": false,
      "details": "<code>set&#95;union</code> constructs a sorted range that is the union of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;union</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code>, <code>[first2, last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nThis version of <code>set&#95;union</code> compares elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;union</code> to compute the union of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A1[7] = {12, 10, 8, 6, 4, 2, 0};\nint A2[5] = {9, 7, 5, 3, 1};\n\nint result[11];\n\nint *result_end = thrust::set_union(A1, A1 + 7, A2, A2 + 5, result, thrust::greater<int>());\n// result = {12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_union",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 1286
      },
      "name": "set_union",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga1d1f920aa3366cc362abeaa08859ae54",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_union\">https://en.cppreference.com/w/cpp/algorithm/set_union</a>",
        "<code><a href=\"/api/groups/group__merging.html#function-merge\">merge</a></code>",
        "<code>includes</code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union\">set&#95;union</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection\">set&#95;intersection</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference\">set&#95;symmetric&#95;difference</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_union",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "/api/groups/group__set__operations.html#function-set_union",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_difference_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair<OutputIterator1,OutputIterator2> set_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;difference&#95;by&#95;key</code> performs a key-value difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;difference&#95;by&#95;key</code> performs the \"difference\" operation from set theory: the keys output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> and not contained in <code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> range shall be copied to the output range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;difference&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference&#95;by&#95;key</code> to compute the set difference of two sets of integers sorted in ascending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {0, 1, 3, 4, 5, 6, 9};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {1, 3, 5, 7, 9};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[3];\nint vals_result[3];\n\nthrust::pair<int*,int*> end = thrust::set_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 4, 6}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1388
      },
      "name": "set_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga2751b5bb0d87c9815e7a2adfe84a04a6",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_difference_by_key",
      "type": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_difference_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_difference_by_key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair<OutputIterator1,OutputIterator2> set_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;difference&#95;by&#95;key</code> performs a key-value difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;difference&#95;by&#95;key</code> performs the \"difference\" operation from set theory: the keys output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> and not contained in <code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> range shall be copied to the output range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;difference&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference&#95;by&#95;key</code> to compute the set difference of two sets of integers sorted in ascending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A_keys[6] = {0, 1, 3, 4, 5, 6, 9};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {1, 3, 5, 7, 9};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[3];\nint vals_result[3];\n\nthrust::pair<int*,int*> end = thrust::set_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 4, 6}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1485
      },
      "name": "set_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga2f45585e4ad8a50e00653d9c95d5ae25",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_difference_by_key",
      "type": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_difference_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_difference_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair<OutputIterator1,OutputIterator2> set_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;difference&#95;by&#95;key</code> performs a key-value difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;difference&#95;by&#95;key</code> performs the \"difference\" operation from set theory: the keys output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> and not contained in <code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> range shall be copied to the output range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;difference&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference&#95;by&#95;key</code> to compute the set difference of two sets of integers sorted in descending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {9, 6, 5, 4, 3, 1, 0};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {9, 7, 5, 3, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[3];\nint vals_result[3];\n\nthrust::pair<int*,int*> end = thrust::set_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result, thrust::greater<int>());\n// keys_result is now {0, 4, 6}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1593
      },
      "name": "set_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1gad52d7b324221596bf5d82039035aca3d",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_difference_by_key",
      "type": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_difference_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_difference_by_key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair<OutputIterator1,OutputIterator2> set_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;difference&#95;by&#95;key</code> performs a key-value difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;difference&#95;by&#95;key</code> performs the \"difference\" operation from set theory: the keys output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> and not contained in <code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> range shall be copied to the output range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;difference&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference&#95;by&#95;key</code> to compute the set difference of two sets of integers sorted in descending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A_keys[6] = {9, 6, 5, 4, 3, 1, 0};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {9, 7, 5, 3, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[3];\nint vals_result[3];\n\nthrust::pair<int*,int*> end = thrust::set_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result, thrust::greater<int>());\n// keys_result is now {0, 4, 6}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1695
      },
      "name": "set_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga5e517f998cfa2a7fb7e5d6a8ec4a0e38",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_difference_by_key",
      "type": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_difference_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_intersection_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair<OutputIterator1,OutputIterator2> set_intersection_by_key",
      "deleted": false,
      "details": "<code>set&#95;intersection&#95;by&#95;key</code> performs a key-value intersection operation from set theory. <code>set&#95;intersection&#95;by&#95;key</code> constructs a sorted range that is the intersection of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;intersection&#95;by&#95;key</code> performs the \"intersection\" operation from set theory: the keys output range contains a copy of every element that is contained in both <code>[keys&#95;first1, keys&#95;last1)</code><code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if an element appears <code>m</code> times in <code>[keys&#95;first1, keys&#95;last1)</code> and <code>n</code> times in <code>[keys&#95;first2, keys&#95;last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the keys output range. <code>set&#95;intersection&#95;by&#95;key</code> is stable, meaning both that elements are copied from the first input range rather than the second, and that the relative order of elements in the output range is the same as the first input range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> to the keys output range, the corresponding value element is copied from <code>[values&#95;first1, values&#95;last1)</code> to the values output range.\n\nThis version of <code>set&#95;intersection&#95;by&#95;key</code> compares objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection&#95;by&#95;key</code> to compute the set intersection of two sets of integers sorted in ascending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {1, 3, 5, 7, 9, 11};\nint A_vals[6] = {0, 0, 0, 0, 0,  0};\n\nint B_keys[7] = {1, 1, 2, 3, 5,  8, 13};\n\nint keys_result[7];\nint vals_result[7];\n\nthrust::pair<int*,int*> end = thrust::set_intersection_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 7, A_vals, keys_result, vals_result);\n\n// keys_result is now {1, 3, 5}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_intersection_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1800
      },
      "name": "set_intersection_by_key",
      "note": [
        "Unlike the other key-value set operations, <code>set&#95;intersection&#95;by&#95;key</code> is unique in that it has no <code>values&#95;first2</code> parameter because elements from the second input range are never copied to the output range."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1gaa567473102426a2efca38d33ac604cd3",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection_by_key",
      "type": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_intersection_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_intersection_by_key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair<OutputIterator1,OutputIterator2> set_intersection_by_key",
      "deleted": false,
      "details": "<code>set&#95;intersection&#95;by&#95;key</code> performs a key-value intersection operation from set theory. <code>set&#95;intersection&#95;by&#95;key</code> constructs a sorted range that is the intersection of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;intersection&#95;by&#95;key</code> performs the \"intersection\" operation from set theory: the keys output range contains a copy of every element that is contained in both <code>[keys&#95;first1, keys&#95;last1)</code><code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if an element appears <code>m</code> times in <code>[keys&#95;first1, keys&#95;last1)</code> and <code>n</code> times in <code>[keys&#95;first2, keys&#95;last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the keys output range. <code>set&#95;intersection&#95;by&#95;key</code> is stable, meaning both that elements are copied from the first input range rather than the second, and that the relative order of elements in the output range is the same as the first input range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> to the keys output range, the corresponding value element is copied from <code>[values&#95;first1, values&#95;last1)</code> to the values output range.\n\nThis version of <code>set&#95;intersection&#95;by&#95;key</code> compares objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection&#95;by&#95;key</code> to compute the set intersection of two sets of integers sorted in ascending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A_keys[6] = {1, 3, 5, 7, 9, 11};\nint A_vals[6] = {0, 0, 0, 0, 0,  0};\n\nint B_keys[7] = {1, 1, 2, 3, 5,  8, 13};\n\nint keys_result[7];\nint vals_result[7];\n\nthrust::pair<int*,int*> end = thrust::set_intersection_by_key(A_keys, A_keys + 6, B_keys, B_keys + 7, A_vals, keys_result, vals_result);\n\n// keys_result is now {1, 3, 5}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_intersection_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1896
      },
      "name": "set_intersection_by_key",
      "note": [
        "Unlike the other key-value set operations, <code>set&#95;intersection&#95;by&#95;key</code> is unique in that it has no <code>values&#95;first2</code> parameter because elements from the second input range are never copied to the output range."
      ],
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga0f5d4a2cf742f9aa244ec55f03bb37af",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection_by_key",
      "type": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_intersection_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_intersection_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair<OutputIterator1,OutputIterator2> set_intersection_by_key",
      "deleted": false,
      "details": "<code>set&#95;intersection&#95;by&#95;key</code> performs a key-value intersection operation from set theory. <code>set&#95;intersection&#95;by&#95;key</code> constructs a sorted range that is the intersection of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;intersection&#95;by&#95;key</code> performs the \"intersection\" operation from set theory: the keys output range contains a copy of every element that is contained in both <code>[keys&#95;first1, keys&#95;last1)</code><code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if an element appears <code>m</code> times in <code>[keys&#95;first1, keys&#95;last1)</code> and <code>n</code> times in <code>[keys&#95;first2, keys&#95;last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the keys output range. <code>set&#95;intersection&#95;by&#95;key</code> is stable, meaning both that elements are copied from the first input range rather than the second, and that the relative order of elements in the output range is the same as the first input range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> to the keys output range, the corresponding value element is copied from <code>[values&#95;first1, values&#95;last1)</code> to the values output range.\n\nThis version of <code>set&#95;intersection&#95;by&#95;key</code> compares objects using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection&#95;by&#95;key</code> to compute the set intersection of two sets of integers sorted in descending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {11, 9, 7, 5, 3, 1};\nint A_vals[6] = { 0, 0, 0, 0, 0, 0};\n\nint B_keys[7] = {13, 8, 5, 3, 2, 1, 1};\n\nint keys_result[7];\nint vals_result[7];\n\nthrust::pair<int*,int*> end = thrust::set_intersection_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 7, A_vals, keys_result, vals_result, thrust::greater<int>());\n\n// keys_result is now {5, 3, 1}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_intersection_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2003
      },
      "name": "set_intersection_by_key",
      "note": [
        "Unlike the other key-value set operations, <code>set&#95;intersection&#95;by&#95;key</code> is unique in that it has no <code>values&#95;first2</code> parameter because elements from the second input range are never copied to the output range."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1gaded786771183f911ea5185b4be4cd201",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_intersection_by_key",
      "type": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_intersection_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_intersection_by_key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair<OutputIterator1,OutputIterator2> set_intersection_by_key",
      "deleted": false,
      "details": "<code>set&#95;intersection&#95;by&#95;key</code> performs a key-value intersection operation from set theory. <code>set&#95;intersection&#95;by&#95;key</code> constructs a sorted range that is the intersection of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;intersection&#95;by&#95;key</code> performs the \"intersection\" operation from set theory: the keys output range contains a copy of every element that is contained in both <code>[keys&#95;first1, keys&#95;last1)</code><code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if an element appears <code>m</code> times in <code>[keys&#95;first1, keys&#95;last1)</code> and <code>n</code> times in <code>[keys&#95;first2, keys&#95;last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the keys output range. <code>set&#95;intersection&#95;by&#95;key</code> is stable, meaning both that elements are copied from the first input range rather than the second, and that the relative order of elements in the output range is the same as the first input range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> to the keys output range, the corresponding value element is copied from <code>[values&#95;first1, values&#95;last1)</code> to the values output range.\n\nThis version of <code>set&#95;intersection&#95;by&#95;key</code> compares objects using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection&#95;by&#95;key</code> to compute the set intersection of two sets of integers sorted in descending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A_keys[6] = {11, 9, 7, 5, 3, 1};\nint A_vals[6] = { 0, 0, 0, 0, 0, 0};\n\nint B_keys[7] = {13, 8, 5, 3, 2, 1, 1};\n\nint keys_result[7];\nint vals_result[7];\n\nthrust::pair<int*,int*> end = thrust::set_intersection_by_key(A_keys, A_keys + 6, B_keys, B_keys + 7, A_vals, keys_result, vals_result, thrust::greater<int>());\n\n// keys_result is now {5, 3, 1}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_intersection_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2104
      },
      "name": "set_intersection_by_key",
      "note": [
        "Unlike the other key-value set operations, <code>set&#95;intersection&#95;by&#95;key</code> is unique in that it has no <code>values&#95;first2</code> parameter because elements from the second input range are never copied to the output range."
      ],
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1gac8e671fd686b501b08a8266f5e99b9d5",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_intersection_by_key",
      "type": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_intersection_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_symmetric_difference_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair<OutputIterator1,OutputIterator2> set_symmetric_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a key-value symmetric difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the symmetric difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> but not <code>[keys&#95;first2, keys&#95;last1)</code>, and a copy of every element that is contained in <code>[keys&#95;first2, keys&#95;last2)</code> but not <code>[keys&#95;first1, keys&#95;last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[keys&#95;first2, keys&#95;last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[keys&#95;first2, keys&#95;last2)</code> if <code>m &lt; n</code>.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in ascending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {0, 1, 2, 2, 4, 6, 7};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {1, 1, 2, 5, 8};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[6];\nint vals_result[6];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 4, 5, 6, 7, 8}\n// vals_result is now {0, 0, 1, 0, 0, 1}\n```",
      "explicit": false,
      "fullname": "set_operations::set_symmetric_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2211
      },
      "name": "set_symmetric_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga3d11d9c9e6da7291735229480e70462f",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference_by_key",
      "type": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_symmetric_difference_by_key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair<OutputIterator1,OutputIterator2> set_symmetric_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a key-value symmetric difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the symmetric difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> but not <code>[keys&#95;first2, keys&#95;last1)</code>, and a copy of every element that is contained in <code>[keys&#95;first2, keys&#95;last2)</code> but not <code>[keys&#95;first1, keys&#95;last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[keys&#95;first2, keys&#95;last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[keys&#95;first2, keys&#95;last2)</code> if <code>m &lt; n</code>.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in ascending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A_keys[6] = {0, 1, 2, 2, 4, 6, 7};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {1, 1, 2, 5, 8};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[6];\nint vals_result[6];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 4, 5, 6, 7, 8}\n// vals_result is now {0, 0, 1, 0, 0, 1}\n```",
      "explicit": false,
      "fullname": "set_operations::set_symmetric_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2311
      },
      "name": "set_symmetric_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga10403b5e93146dc3c463040436365702",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference_by_key",
      "type": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_symmetric_difference_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair<OutputIterator1,OutputIterator2> set_symmetric_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a key-value symmetric difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the symmetric difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> but not <code>[keys&#95;first2, keys&#95;last1)</code>, and a copy of every element that is contained in <code>[keys&#95;first2, keys&#95;last2)</code> but not <code>[keys&#95;first1, keys&#95;last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[keys&#95;first2, keys&#95;last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[keys&#95;first2, keys&#95;last2)</code> if <code>m &lt; n</code>.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in descending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {7, 6, 4, 2, 2, 1, 0};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {8, 5, 2, 1, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[6];\nint vals_result[6];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {8, 7, 6, 5, 4, 0}\n// vals_result is now {1, 0, 0, 1, 0, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_symmetric_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2422
      },
      "name": "set_symmetric_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1gaf04c74d603f387481d195b9cb380cc12",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_symmetric_difference_by_key",
      "type": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_symmetric_difference_by_key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair<OutputIterator1,OutputIterator2> set_symmetric_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a key-value symmetric difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the symmetric difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> but not <code>[keys&#95;first2, keys&#95;last1)</code>, and a copy of every element that is contained in <code>[keys&#95;first2, keys&#95;last2)</code> but not <code>[keys&#95;first1, keys&#95;last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[keys&#95;first2, keys&#95;last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[keys&#95;first2, keys&#95;last2)</code> if <code>m &lt; n</code>.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in descending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A_keys[6] = {7, 6, 4, 2, 2, 1, 0};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {8, 5, 2, 1, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[6];\nint vals_result[6];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {8, 7, 6, 5, 4, 0}\n// vals_result is now {1, 0, 0, 1, 0, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_symmetric_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2527
      },
      "name": "set_symmetric_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga6778ced60262bac14e19ccddbee060af",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_union_by_key\">set&#95;union&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_symmetric_difference_by_key",
      "type": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_union_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair<OutputIterator1,OutputIterator2> set_union_by_key",
      "deleted": false,
      "details": "<code>set&#95;union&#95;by&#95;key</code> performs a key-value union operation from set theory. <code>set&#95;union&#95;by&#95;key</code> constructs a sorted range that is the union of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;union&#95;by&#95;key</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code>, <code>[keys&#95;first2, keys&#95;last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;union&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in ascending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {0, 2, 4, 6, 8, 10, 12};\nint A_vals[6] = {0, 0, 0, 0, 0,  0,  0};\n\nint B_keys[5] = {1, 3, 5, 7, 9};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[11];\nint vals_result[11];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12}\n// vals_result is now {0, 1, 0, 1, 0, 1, 0, 1, 0, 1,  0,  0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_union_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2633
      },
      "name": "set_union_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga8d488ad1238e5f8ac1061922d5d13397",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_union_by_key",
      "type": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_union_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_union_by_key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair<OutputIterator1,OutputIterator2> set_union_by_key",
      "deleted": false,
      "details": "<code>set&#95;union&#95;by&#95;key</code> performs a key-value union operation from set theory. <code>set&#95;union&#95;by&#95;key</code> constructs a sorted range that is the union of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;union&#95;by&#95;key</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code>, <code>[keys&#95;first2, keys&#95;last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;union&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in ascending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A_keys[6] = {0, 2, 4, 6, 8, 10, 12};\nint A_vals[6] = {0, 0, 0, 0, 0,  0,  0};\n\nint B_keys[5] = {1, 3, 5, 7, 9};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[11];\nint vals_result[11];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12}\n// vals_result is now {0, 1, 0, 1, 0, 1, 0, 1, 0, 1,  0,  0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_union_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2731
      },
      "name": "set_union_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga4f6f4aeae52fe40e45c337c263946b61",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_union_by_key",
      "type": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_union_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_union_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair<OutputIterator1,OutputIterator2> set_union_by_key",
      "deleted": false,
      "details": "<code>set&#95;union&#95;by&#95;key</code> performs a key-value union operation from set theory. <code>set&#95;union&#95;by&#95;key</code> constructs a sorted range that is the union of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;union&#95;by&#95;key</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code>, <code>[keys&#95;first2, keys&#95;last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;union&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in descending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {12, 10, 8, 6, 4, 2, 0};\nint A_vals[6] = { 0,  0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {9, 7, 5, 3, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[11];\nint vals_result[11];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result, thrust::greater<int>());\n// keys_result is now {12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\n// vals_result is now { 0,  1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_union_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2840
      },
      "name": "set_union_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1gaf5146cdb30126bdeedb66d69bc8f75c1",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_union_by_key",
      "type": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_union_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set_union_by_key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair<OutputIterator1,OutputIterator2> set_union_by_key",
      "deleted": false,
      "details": "<code>set&#95;union&#95;by&#95;key</code> performs a key-value union operation from set theory. <code>set&#95;union&#95;by&#95;key</code> constructs a sorted range that is the union of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;union&#95;by&#95;key</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code>, <code>[keys&#95;first2, keys&#95;last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;union&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in descending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A_keys[6] = {12, 10, 8, 6, 4, 2, 0};\nint A_vals[6] = { 0,  0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {9, 7, 5, 3, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[11];\nint vals_result[11];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result, thrust::greater<int>());\n// keys_result is now {12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\n// vals_result is now { 0,  1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}\n```",
      "explicit": false,
      "fullname": "set_operations::set_union_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2943
      },
      "name": "set_union_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "refid": "group__set__operations_1ga32722b16da8e4d0af3c9bbc43dfc970c",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_symmetric_difference_by_key\">set&#95;symmetric&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_intersection_by_key\">set&#95;intersection&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__set__operations.html#function-set_difference_by_key\">set&#95;difference&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/api/groups/group__predicates.html#function-is_sorted\">is&#95;sorted</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_union_by_key",
      "type": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "/api/groups/group__set__operations.html#function-set_union_by_key",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "refid": "group__set__operations",
  "static": false,
  "strong": false,
  "title": "Set Operations",
  "url": "/api/groups/group__set__operations.html",
  "visibility": "public"
}