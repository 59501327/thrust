{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "searching",
  "groups": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "binary_search",
      "kind": "group",
      "name": "binary_search",
      "refid": "group__binary__search",
      "title": "Binary Search",
      "url": "/thrust/api/groups/group__binary__search.html",
      "visibility": "public"
    }
  ],
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "algorithms",
    "kind": "group",
    "name": "algorithms",
    "refid": "group__algorithms",
    "title": "Algorithms",
    "url": "/thrust/api/groups/group__algorithms.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "name": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "/thrust/api/groups/group__algorithms.html",
      "visibility": "public"
    }
  ],
  "name": "searching",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "algorithms",
    "kind": "group",
    "name": "algorithms",
    "refid": "group__algorithms",
    "title": "Algorithms",
    "url": "/thrust/api/groups/group__algorithms.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "name": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "/thrust/api/groups/group__algorithms.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-find",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ InputIterator find",
      "deleted": false,
      "details": "<code>find</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>&#42;i == value</code> or <code>last</code> if no such iterator exists.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find(thrust::device, input.begin(), input.end(), 3); // returns input.first() + 2\niter = thrust::find(thrust::device, input.begin(), input.end(), 5); // returns input.first() + 1\niter = thrust::find(thrust::device, input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "searching::find",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 79
      },
      "name": "find",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "value",
          "text": "The value to find. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "refid": "group__searching_1ga1b0a307d1831060114f83a86c85e0629",
      "returns": [
        "The first iterator <code>i</code> such that <code>&#42;i == value</code> or <code>last</code>."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__searching.html#function-find_if\">find_if</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-mismatch\">mismatch</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is equality comparable to type <code>T</code>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">EqualityComparable</a>."
        }
      ],
      "title": "find",
      "type": "__host__ __device__ InputIterator",
      "typePlain": "__host__ __device__ InputIterator",
      "url": "/thrust/api/groups/group__searching.html#function-find",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find",
      "argsString": "(InputIterator first, InputIterator last, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "InputIterator find",
      "deleted": false,
      "details": "<code>find</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>&#42;i == value</code> or <code>last</code> if no such iterator exists.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find(input.begin(), input.end(), 3); // returns input.first() + 2\niter = thrust::find(input.begin(), input.end(), 5); // returns input.first() + 1\niter = thrust::find(input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "searching::find",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 120
      },
      "name": "find",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "value",
          "text": "The value to find. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "refid": "group__searching_1ga0404d4fa9a2afa0bbc1ea165e3f50e8a",
      "returns": [
        "The first iterator <code>i</code> such that <code>&#42;i == value</code> or <code>last</code>."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__searching.html#function-find_if\">find_if</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-mismatch\">mismatch</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is equality comparable to type <code>T</code>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">EqualityComparable</a>."
        }
      ],
      "title": "find",
      "type": "InputIterator",
      "typePlain": "InputIterator",
      "url": "/thrust/api/groups/group__searching.html#function-find",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find_if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ InputIterator find_if",
      "deleted": false,
      "details": "<code>find&#95;if</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>true</code> or <code>last</code> if no such iterator exists.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\n\nstruct greater_than_four\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 4;\n  }\n};\n\nstruct greater_than_ten\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 10;\n  }\n};\n\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find_if(thrust::device, input.begin(), input.end(), greater_than_four()); // returns input.first() + 1\n\niter = thrust::find_if(thrust::device, input.begin(), input.end(), greater_than_ten());  // returns input.end()\n```",
      "explicit": false,
      "fullname": "searching::find_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 186
      },
      "name": "find_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__searching_1gaf63b8bc9edb82fc1abf99aa3ecfd2d16",
      "returns": [
        "The first iterator <code>i</code> such that <code>pred(&#42;i)</code> is <code>true</code>, or <code>last</code>."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__searching.html#function-find\">find</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-find_if_not\">find_if_not</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-mismatch\">mismatch</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "find_if",
      "type": "__host__ __device__ InputIterator",
      "typePlain": "__host__ __device__ InputIterator",
      "url": "/thrust/api/groups/group__searching.html#function-find_if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find_if",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "InputIterator find_if",
      "deleted": false,
      "details": "<code>find&#95;if</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>true</code> or <code>last</code> if no such iterator exists.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n\nstruct greater_than_four\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 4;\n  }\n};\n\nstruct greater_than_ten\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 10;\n  }\n};\n\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find_if(input.begin(), input.end(), greater_than_four()); // returns input.first() + 1\n\niter = thrust::find_if(input.begin(), input.end(), greater_than_ten());  // returns input.end()\n```",
      "explicit": false,
      "fullname": "searching::find_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 246
      },
      "name": "find_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__searching_1gabfd4776736f758b264a8827d19554551",
      "returns": [
        "The first iterator <code>i</code> such that <code>pred(&#42;i)</code> is <code>true</code>, or <code>last</code>."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__searching.html#function-find\">find</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-find_if_not\">find_if_not</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-mismatch\">mismatch</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "find_if",
      "type": "InputIterator",
      "typePlain": "InputIterator",
      "url": "/thrust/api/groups/group__searching.html#function-find_if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find_if_not",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ InputIterator find_if_not",
      "deleted": false,
      "details": "<code>find&#95;if&#95;not</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>false</code> or <code>last</code> if no such iterator exists.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\n\nstruct greater_than_four\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 4;\n  }\n};\n\nstruct greater_than_ten\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 10;\n  }\n};\n\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find_if_not(thrust::device, input.begin(), input.end(), greater_than_four()); // returns input.first()\n\niter = thrust::find_if_not(thrust::device, input.begin(), input.end(), greater_than_ten());  // returns input.first()\n```",
      "explicit": false,
      "fullname": "searching::find_if_not",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 312
      },
      "name": "find_if_not",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__searching_1ga9f1e2d977c0d7f00137e7788331fb5cc",
      "returns": [
        "The first iterator <code>i</code> such that <code>pred(&#42;i)</code> is <code>false</code>, or <code>last</code>."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__searching.html#function-find\">find</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-find_if\">find_if</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-mismatch\">mismatch</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "find_if_not",
      "type": "__host__ __device__ InputIterator",
      "typePlain": "__host__ __device__ InputIterator",
      "url": "/thrust/api/groups/group__searching.html#function-find_if_not",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find_if_not",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "InputIterator find_if_not",
      "deleted": false,
      "details": "<code>find&#95;if&#95;not</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>false</code> or <code>last</code> if no such iterator exists.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n\nstruct greater_than_four\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 4;\n  }\n};\n\nstruct greater_than_ten\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 10;\n  }\n};\n\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find_if_not(input.begin(), input.end(), greater_than_four()); // returns input.first()\n\niter = thrust::find_if_not(input.begin(), input.end(), greater_than_ten());  // returns input.first()\n```",
      "explicit": false,
      "fullname": "searching::find_if_not",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 372
      },
      "name": "find_if_not",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__searching_1gab541810e69a886155311ddd3a4d2f864",
      "returns": [
        "The first iterator <code>i</code> such that <code>pred(&#42;i)</code> is <code>false</code>, or <code>last</code>."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__searching.html#function-find\">find</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-find_if\">find_if</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-mismatch\">mismatch</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "find_if_not",
      "type": "InputIterator",
      "typePlain": "InputIterator",
      "url": "/thrust/api/groups/group__searching.html#function-find_if_not",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mismatch",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair<InputIterator1, InputIterator2> mismatch",
      "deleted": false,
      "details": "<code>mismatch</code> finds the first position where the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> differ. The two versions of <code>mismatch</code> use different tests for whether elements differ.\n\nThis version of <code>mismatch</code> finds the first iterator <code>i</code> in <code>[first1, last1)</code> such that <code>&#42;i == &#42;(first2 + (i - first1))</code> is <code>false</code>. The return value is a <code>pair</code> whose first element is <code>i</code> and whose second element is <code>&#42;(first2 + (i - first1))</code>. If no such iterator <code>i</code> exists, the return value is a <code>pair</code> whose first element is <code>last1</code> and whose second element is <code>&#42;(first2 + (last1 - first1))</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/mismatch.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> vec1(4);\nthrust::device_vector<int> vec2(4);\n\nvec1[0] = 0;  vec2[0] = 0; \nvec1[1] = 5;  vec2[1] = 5;\nvec1[2] = 3;  vec2[2] = 8;\nvec1[3] = 7;  vec2[3] = 7;\n\ntypedef thrust::device_vector<int>::iterator Iterator;\nthrust::pair<Iterator,Iterator> result;\n\nresult = thrust::mismatch(thrust::device, vec1.begin(), vec1.end(), vec2.begin());\n\n// result.first  is vec1.begin() + 2\n// result.second is vec2.begin() + 2\n```",
      "explicit": false,
      "fullname": "searching::mismatch",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 14,
        "file": "thrust/mismatch.h",
        "line": 89
      },
      "name": "mismatch",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        }
      ],
      "pureVirtual": false,
      "refid": "group__searching_1gacab4da8bfd3fcd50ffc4d842374d52d9",
      "returns": [
        "The first position where the sequences differ."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__searching.html#function-find\">find</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-find_if\">find_if</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is equality comparable to <code>InputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>."
        }
      ],
      "title": "mismatch",
      "type": "__host__ __device__ thrust::pair< InputIterator1, InputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< InputIterator1, InputIterator2 >",
      "url": "/thrust/api/groups/group__searching.html#function-mismatch",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mismatch",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair<InputIterator1, InputIterator2> mismatch",
      "deleted": false,
      "details": "<code>mismatch</code> finds the first position where the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> differ. The two versions of <code>mismatch</code> use different tests for whether elements differ.\n\nThis version of <code>mismatch</code> finds the first iterator <code>i</code> in <code>[first1, last1)</code> such that <code>&#42;i == &#42;(first2 + (i - first1))</code> is <code>false</code>. The return value is a <code>pair</code> whose first element is <code>i</code> and whose second element is <code>&#42;(first2 + (i - first1))</code>. If no such iterator <code>i</code> exists, the return value is a <code>pair</code> whose first element is <code>last1</code> and whose second element is <code>&#42;(first2 + (last1 - first1))</code>.\n\n\n\n```cpp\n#include <thrust/mismatch.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> vec1(4);\nthrust::device_vector<int> vec2(4);\n\nvec1[0] = 0;  vec2[0] = 0; \nvec1[1] = 5;  vec2[1] = 5;\nvec1[2] = 3;  vec2[2] = 8;\nvec1[3] = 7;  vec2[3] = 7;\n\ntypedef thrust::device_vector<int>::iterator Iterator;\nthrust::pair<Iterator,Iterator> result;\n\nresult = thrust::mismatch(vec1.begin(), vec1.end(), vec2.begin());\n\n// result.first  is vec1.begin() + 2\n// result.second is vec2.begin() + 2\n```",
      "explicit": false,
      "fullname": "searching::mismatch",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 14,
        "file": "thrust/mismatch.h",
        "line": 139
      },
      "name": "mismatch",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        }
      ],
      "pureVirtual": false,
      "refid": "group__searching_1ga59f5413e7093fb77ab6c1c9646f8963b",
      "returns": [
        "The first position where the sequences differ."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__searching.html#function-find\">find</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-find_if\">find_if</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is equality comparable to <code>InputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>."
        }
      ],
      "title": "mismatch",
      "type": "thrust::pair< InputIterator1, InputIterator2 >",
      "typePlain": "thrust::pair< InputIterator1, InputIterator2 >",
      "url": "/thrust/api/groups/group__searching.html#function-mismatch",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mismatch",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, BinaryPredicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair<InputIterator1, InputIterator2> mismatch",
      "deleted": false,
      "details": "<code>mismatch</code> finds the first position where the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> differ. The two versions of <code>mismatch</code> use different tests for whether elements differ.\n\nThis version of <code>mismatch</code> finds the first iterator <code>i</code> in <code>[first1, last1)</code> such that <code>pred(&#42;i, &#42;(first2 + (i - first1))</code> is <code>false</code>. The return value is a <code>pair</code> whose first element is <code>i</code> and whose second element is <code>&#42;(first2 + (i - first1))</code>. If no such iterator <code>i</code> exists, the return value is a <code>pair</code> whose first element is <code>last1</code> and whose second element is <code>&#42;(first2 + (last1 - first1))</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/mismatch.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> vec1(4);\nthrust::device_vector<int> vec2(4);\n\nvec1[0] = 0;  vec2[0] = 0; \nvec1[1] = 5;  vec2[1] = 5;\nvec1[2] = 3;  vec2[2] = 8;\nvec1[3] = 7;  vec2[3] = 7;\n\ntypedef thrust::device_vector<int>::iterator Iterator;\nthrust::pair<Iterator,Iterator> result;\n\nresult = thrust::mismatch(thrust::device, vec1.begin(), vec1.end(), vec2.begin(), thrust::equal_to<int>());\n\n// result.first  is vec1.begin() + 2\n// result.second is vec2.begin() + 2\n```",
      "explicit": false,
      "fullname": "searching::mismatch",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 14,
        "file": "thrust/mismatch.h",
        "line": 195
      },
      "name": "mismatch",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        },
        {
          "name": "pred",
          "text": "The binary predicate to compare elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__searching_1gac6f40793c3aa345991e31546e05c9e23",
      "returns": [
        "The first position where the sequences differ."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__searching.html#function-find\">find</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-find_if\">find_if</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Input Iterator</a>."
        }
      ],
      "title": "mismatch",
      "type": "__host__ __device__ thrust::pair< InputIterator1, InputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< InputIterator1, InputIterator2 >",
      "url": "/thrust/api/groups/group__searching.html#function-mismatch",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mismatch",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, BinaryPredicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair<InputIterator1, InputIterator2> mismatch",
      "deleted": false,
      "details": "<code>mismatch</code> finds the first position where the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> differ. The two versions of <code>mismatch</code> use different tests for whether elements differ.\n\nThis version of <code>mismatch</code> finds the first iterator <code>i</code> in <code>[first1, last1)</code> such that <code>pred(&#42;i, &#42;(first2 + (i - first1))</code> is <code>false</code>. The return value is a <code>pair</code> whose first element is <code>i</code> and whose second element is <code>&#42;(first2 + (i - first1))</code>. If no such iterator <code>i</code> exists, the return value is a <code>pair</code> whose first element is <code>last1</code> and whose second element is <code>&#42;(first2 + (last1 - first1))</code>.\n\n\n\n```cpp\n#include <thrust/mismatch.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> vec1(4);\nthrust::device_vector<int> vec2(4);\n\nvec1[0] = 0;  vec2[0] = 0; \nvec1[1] = 5;  vec2[1] = 5;\nvec1[2] = 3;  vec2[2] = 8;\nvec1[3] = 7;  vec2[3] = 7;\n\ntypedef thrust::device_vector<int>::iterator Iterator;\nthrust::pair<Iterator,Iterator> result;\n\nresult = thrust::mismatch(vec1.begin(), vec1.end(), vec2.begin(), thrust::equal_to<int>());\n\n// result.first  is vec1.begin() + 2\n// result.second is vec2.begin() + 2\n```",
      "explicit": false,
      "fullname": "searching::mismatch",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 14,
        "file": "thrust/mismatch.h",
        "line": 247
      },
      "name": "mismatch",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        },
        {
          "name": "pred",
          "text": "The binary predicate to compare elements. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__searching_1ga3e16ccac9162474cf1f0ea73cc90c55f",
      "returns": [
        "The first position where the sequences differ."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__searching.html#function-find\">find</a>",
        "<a href=\"/thrust/api/groups/group__searching.html#function-find_if\">find_if</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Input Iterator</a>."
        }
      ],
      "title": "mismatch",
      "type": "thrust::pair< InputIterator1, InputIterator2 >",
      "typePlain": "thrust::pair< InputIterator1, InputIterator2 >",
      "url": "/thrust/api/groups/group__searching.html#function-mismatch",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition_point",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator partition_point",
      "deleted": false,
      "details": "<code>partition&#95;point</code> returns an iterator pointing to the end of the true partition of a partitioned range. <code>partition&#95;point</code> requires the input range <code>[first,last)</code> to be a partition; that is, all elements which satisfy <code>pred</code> shall appear before those that do not.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/execution_policy.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n\n...\n\nint A[] = {2, 4, 6, 8, 10, 1, 3, 5, 7, 9};\nint * B = thrust::partition_point(thrust::host, A, A + 10, is_even());\n// B - A is 5\n// [A, B) contains only even values\n```",
      "explicit": false,
      "fullname": "searching::partition_point",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 1263
      },
      "name": "partition_point",
      "note": [
        "Though similar, <code>partition&#95;point</code> is not redundant with <code>find&#95;if&#95;not</code>. <code>partition&#95;point's</code> precondition provides an opportunity for a faster implemention."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range to consider. "
        },
        {
          "name": "last",
          "text": "The end of the range to consider. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the range <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall be partitioned by <code>pred</code>."
      ],
      "pureVirtual": false,
      "refid": "group__searching_1ga36ee2a2b43b7bd4d0d4c598e1e03358d",
      "returns": [
        "An iterator <code>mid</code> such that <code>all&#95;of(first, mid, pred)</code> and <code>none&#95;of(mid, last, pred)</code> are both true."
      ],
      "see": [
        "<code><a href=\"/thrust/api/groups/group__partitioning.html#function-partition\">partition</a></code>",
        "<code><a href=\"/thrust/api/groups/group__searching.html#function-find_if_not\">find&#95;if&#95;not</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition_point",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "/thrust/api/groups/group__searching.html#function-partition_point",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition_point",
      "argsString": "(ForwardIterator first, ForwardIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator partition_point",
      "deleted": false,
      "details": "<code>partition&#95;point</code> returns an iterator pointing to the end of the true partition of a partitioned range. <code>partition&#95;point</code> requires the input range <code>[first,last)</code> to be a partition; that is, all elements which satisfy <code>pred</code> shall appear before those that do not. \n\n```cpp\n#include <thrust/partition.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n\n...\n\nint A[] = {2, 4, 6, 8, 10, 1, 3, 5, 7, 9};\nint * B = thrust::partition_point(A, A + 10, is_even());\n// B - A is 5\n// [A, B) contains only even values\n```",
      "explicit": false,
      "fullname": "searching::partition_point",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 1314
      },
      "name": "partition_point",
      "note": [
        "Though similar, <code>partition&#95;point</code> is not redundant with <code>find&#95;if&#95;not</code>. <code>partition&#95;point's</code> precondition provides an opportunity for a faster implemention."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range to consider. "
        },
        {
          "name": "last",
          "text": "The end of the range to consider. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the range <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall be partitioned by <code>pred</code>."
      ],
      "pureVirtual": false,
      "refid": "group__searching_1ga8147a8bc085b48fb1b8a69fc98e26c70",
      "returns": [
        "An iterator <code>mid</code> such that <code>all&#95;of(first, mid, pred)</code> and <code>none&#95;of(mid, last, pred)</code> are both true."
      ],
      "see": [
        "<code><a href=\"/thrust/api/groups/group__partitioning.html#function-partition\">partition</a></code>",
        "<code><a href=\"/thrust/api/groups/group__searching.html#function-find_if_not\">find&#95;if&#95;not</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition_point",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "/thrust/api/groups/group__searching.html#function-partition_point",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "refid": "group__searching",
  "static": false,
  "strong": false,
  "title": "Searching",
  "url": "/thrust/api/groups/group__searching.html",
  "visibility": "public"
}