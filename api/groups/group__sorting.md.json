{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "sorting",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "algorithms",
    "kind": "group",
    "name": "algorithms",
    "refid": "group__algorithms",
    "title": "Algorithms",
    "url": "/thrust/api/groups/group__algorithms.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "name": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "/thrust/api/groups/group__algorithms.html",
      "visibility": "public"
    }
  ],
  "name": "sorting",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "algorithms",
    "kind": "group",
    "name": "algorithms",
    "refid": "group__algorithms",
    "title": "Algorithms",
    "url": "/thrust/api/groups/group__algorithms.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "name": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "/thrust/api/groups/group__algorithms.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-sort",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator first, RandomAccessIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void sort",
      "deleted": false,
      "details": "<code>sort</code> sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>. Note: <code>sort</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two elements will be preserved by <code>sort</code>.\n\nThis version of <code>sort</code> compares objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort</code> to sort a sequence of integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(thrust::host, A, A + N);\n// A is now {1, 2, 4, 5, 7, 8}\n```",
      "explicit": false,
      "fullname": "sorting::sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 77
      },
      "name": "sort",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1ga752e268bbf39848c7d9ef6debe34ca12",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort\">stable&#95;sort</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "sort",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "/thrust/api/groups/group__sorting.html#function-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort",
      "argsString": "(RandomAccessIterator first, RandomAccessIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void sort",
      "deleted": false,
      "details": "<code>sort</code> sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>. Note: <code>sort</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two elements will be preserved by <code>sort</code>.\n\nThis version of <code>sort</code> compares objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort</code> to sort a sequence of integers.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(A, A + N);\n// A is now {1, 2, 4, 5, 7, 8}\n```",
      "explicit": false,
      "fullname": "sorting::sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 118
      },
      "name": "sort",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1gae50381e49cb58c02b7413ecfc66765f0",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort\">stable&#95;sort</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "sort",
      "type": "void",
      "typePlain": "void",
      "url": "/thrust/api/groups/group__sorting.html#function-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator first, RandomAccessIterator last, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void sort",
      "deleted": false,
      "details": "<code>sort</code> sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>. Note: <code>sort</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two elements will be preserved by <code>sort</code>.\n\nThis version of <code>sort</code> compares objects using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code demonstrates how to sort integers in descending order using the greater<int> comparison operator using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(thrust::host, A, A + N, thrust::greater<int>());\n// A is now {8, 7, 5, 4, 2, 1};\n```",
      "explicit": false,
      "fullname": "sorting::sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 169
      },
      "name": "sort",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1ga6aff42124ddf74b0cf68f2819759fcdb",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort\">stable&#95;sort</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "sort",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "/thrust/api/groups/group__sorting.html#function-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort",
      "argsString": "(RandomAccessIterator first, RandomAccessIterator last, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void sort",
      "deleted": false,
      "details": "<code>sort</code> sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>. Note: <code>sort</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two elements will be preserved by <code>sort</code>.\n\nThis version of <code>sort</code> compares objects using a function object <code>comp</code>.\n\n\nThe following code demonstrates how to sort integers in descending order using the greater<int> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(A, A + N, thrust::greater<int>());\n// A is now {8, 7, 5, 4, 2, 1};\n```",
      "explicit": false,
      "fullname": "sorting::sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 216
      },
      "name": "sort",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1ga0c87fd1f105f5fbb48b64392ae1e4058",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort\">stable&#95;sort</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "sort",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "/thrust/api/groups/group__sorting.html#function-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable_sort",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator first, RandomAccessIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void stable_sort",
      "deleted": false,
      "details": "<code>stable&#95;sort</code> is much like <code>sort:</code> it sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort</code> compares objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort</code> to sort a sequence of integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::stable_sort(thrust::host, A, A + N);\n// A is now {1, 2, 4, 5, 7, 8}\n```",
      "explicit": false,
      "fullname": "sorting::stable_sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 267
      },
      "name": "stable_sort",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1ga59a7a24518e4ca8ec53b17b949a13471",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_sort\">https://en.cppreference.com/w/cpp/algorithm/stable_sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort_by_key\">stable&#95;sort&#95;by&#95;key</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "stable_sort",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "/thrust/api/groups/group__sorting.html#function-stable_sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable_sort",
      "argsString": "(RandomAccessIterator first, RandomAccessIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void stable_sort",
      "deleted": false,
      "details": "<code>stable&#95;sort</code> is much like <code>sort:</code> it sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort</code> compares objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort</code> to sort a sequence of integers.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::stable_sort(A, A + N);\n// A is now {1, 2, 4, 5, 7, 8}\n```",
      "explicit": false,
      "fullname": "sorting::stable_sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 312
      },
      "name": "stable_sort",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1ga261df5894805c2e9aea6cd56505a0681",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_sort\">https://en.cppreference.com/w/cpp/algorithm/stable_sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort_by_key\">stable&#95;sort&#95;by&#95;key</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "stable_sort",
      "type": "void",
      "typePlain": "void",
      "url": "/thrust/api/groups/group__sorting.html#function-stable_sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable_sort",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator first, RandomAccessIterator last, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void stable_sort",
      "deleted": false,
      "details": "<code>stable&#95;sort</code> is much like <code>sort:</code> it sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort</code> compares objects using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code demonstrates how to sort integers in descending order using the greater<int> comparison operator using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(A, A + N, thrust::greater<int>());\n// A is now {8, 7, 5, 4, 2, 1};\n```",
      "explicit": false,
      "fullname": "sorting::stable_sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 367
      },
      "name": "stable_sort",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1ga42d1f6a3e22fadf8f33afe736a62aeb8",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_sort\">https://en.cppreference.com/w/cpp/algorithm/stable_sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort_by_key\">stable&#95;sort&#95;by&#95;key</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "stable_sort",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "/thrust/api/groups/group__sorting.html#function-stable_sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable_sort",
      "argsString": "(RandomAccessIterator first, RandomAccessIterator last, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void stable_sort",
      "deleted": false,
      "details": "<code>stable&#95;sort</code> is much like <code>sort:</code> it sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort</code> compares objects using a function object <code>comp</code>.\n\n\nThe following code demonstrates how to sort integers in descending order using the greater<int> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(A, A + N, thrust::greater<int>());\n// A is now {8, 7, 5, 4, 2, 1};\n```",
      "explicit": false,
      "fullname": "sorting::stable_sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 417
      },
      "name": "stable_sort",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1gae5d31bade6adb110916383e492e31f4c",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_sort\">https://en.cppreference.com/w/cpp/algorithm/stable_sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort\">sort</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort_by_key\">stable&#95;sort&#95;by&#95;key</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "stable_sort",
      "type": "void",
      "typePlain": "void",
      "url": "/thrust/api/groups/group__sorting.html#function-stable_sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void sort_by_key",
      "deleted": false,
      "details": "<code>sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nNote: <code>sort&#95;by&#95;key</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two keys or the relative order of their corresponding values will be preserved by <code>sort&#95;by&#95;key</code>.\n\nThis version of <code>sort&#95;by&#95;key</code> compares key objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::sort_by_key(thrust::host, keys, keys + N, values);\n// keys is now   {  1,   2,   4,   5,   7,   8}\n// values is now {'a', 'c', 'b', 'e', 'f', 'd'}\n```",
      "explicit": false,
      "fullname": "sorting::sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 485
      },
      "name": "sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1ga0661fa7c4c3f0d1e36b87820179f7933",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort_by_key\">stable&#95;sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort\">sort</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable."
        }
      ],
      "title": "sort_by_key",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "/thrust/api/groups/group__sorting.html#function-sort_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort_by_key",
      "argsString": "(RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void sort_by_key",
      "deleted": false,
      "details": "<code>sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nNote: <code>sort&#95;by&#95;key</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two keys or the relative order of their corresponding values will be preserved by <code>sort&#95;by&#95;key</code>.\n\nThis version of <code>sort&#95;by&#95;key</code> compares key objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::sort_by_key(keys, keys + N, values);\n// keys is now   {  1,   2,   4,   5,   7,   8}\n// values is now {'a', 'c', 'b', 'e', 'f', 'd'}\n```",
      "explicit": false,
      "fullname": "sorting::sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 541
      },
      "name": "sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence."
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1gae29ea4586f7a97635ba0d377ca7e8c33",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort_by_key\">stable&#95;sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort\">sort</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable."
        }
      ],
      "title": "sort_by_key",
      "type": "void",
      "typePlain": "void",
      "url": "/thrust/api/groups/group__sorting.html#function-sort_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void sort_by_key",
      "deleted": false,
      "details": "<code>sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nNote: <code>sort&#95;by&#95;key</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two keys or the relative order of their corresponding values will be preserved by <code>sort&#95;by&#95;key</code>.\n\nThis version of <code>sort&#95;by&#95;key</code> compares key objects using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys using the <code>thrust::host</code> execution policy for parallelization.The keys are sorted in descending order using the <code>greater&lt;int&gt;</code> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::sort_by_key(thrust::host, keys, keys + N, values, thrust::greater<int>());\n// keys is now   {  8,   7,   5,   4,   2,   1}\n// values is now {'d', 'f', 'e', 'b', 'c', 'a'}\n```",
      "explicit": false,
      "fullname": "sorting::sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 607
      },
      "name": "sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1ga2be68bdbe0460c62021acb250a566629",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort_by_key\">stable&#95;sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort\">sort</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "sort_by_key",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "/thrust/api/groups/group__sorting.html#function-sort_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort_by_key",
      "argsString": "(RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void sort_by_key",
      "deleted": false,
      "details": "<code>sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nNote: <code>sort&#95;by&#95;key</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two keys or the relative order of their corresponding values will be preserved by <code>sort&#95;by&#95;key</code>.\n\nThis version of <code>sort&#95;by&#95;key</code> compares key objects using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys. The keys are sorted in descending order using the greater<int> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::sort_by_key(keys, keys + N, values, thrust::greater<int>());\n// keys is now   {  8,   7,   5,   4,   2,   1}\n// values is now {'d', 'f', 'e', 'b', 'c', 'a'}\n```",
      "explicit": false,
      "fullname": "sorting::sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 668
      },
      "name": "sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1gaed1e9e2530f6a1270003f6bc5685e7e4",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort_by_key\">stable&#95;sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort\">sort</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "sort_by_key",
      "type": "void",
      "typePlain": "void",
      "url": "/thrust/api/groups/group__sorting.html#function-sort_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable_sort_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void stable_sort_by_key",
      "deleted": false,
      "details": "<code>stable&#95;sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>stable&#95;sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort&#95;by&#95;key</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[keys&#95;first, keys&#95;last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort&#95;by&#95;key</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort&#95;by&#95;key</code> compares key objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;sort&#95;by&#95;key</code> to sort an array of characters using integers as sorting keys using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::stable_sort_by_key(thrust::host, keys, keys + N, values);\n// keys is now   {  1,   2,   4,   5,   7,   8}\n// values is now {'a', 'c', 'b', 'e', 'f', 'd'}\n```",
      "explicit": false,
      "fullname": "sorting::stable_sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 734
      },
      "name": "stable_sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1ga31fc9a54f4e75c7f659c50dbaa717434",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort\">stable&#95;sort</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable."
        }
      ],
      "title": "stable_sort_by_key",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "/thrust/api/groups/group__sorting.html#function-stable_sort_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable_sort_by_key",
      "argsString": "(RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void stable_sort_by_key",
      "deleted": false,
      "details": "<code>stable&#95;sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>stable&#95;sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort&#95;by&#95;key</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[keys&#95;first, keys&#95;last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort&#95;by&#95;key</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort&#95;by&#95;key</code> compares key objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;sort&#95;by&#95;key</code> to sort an array of characters using integers as sorting keys.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::stable_sort_by_key(keys, keys + N, values);\n// keys is now   {  1,   2,   4,   5,   7,   8}\n// values is now {'a', 'c', 'b', 'e', 'f', 'd'}\n```",
      "explicit": false,
      "fullname": "sorting::stable_sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 792
      },
      "name": "stable_sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence."
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1gaeaebdf8536e4683449d8b52d477c5fe9",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort\">stable&#95;sort</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable."
        }
      ],
      "title": "stable_sort_by_key",
      "type": "void",
      "typePlain": "void",
      "url": "/thrust/api/groups/group__sorting.html#function-stable_sort_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable_sort_by_key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void stable_sort_by_key",
      "deleted": false,
      "details": "<code>stable&#95;sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>stable&#95;sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort&#95;by&#95;key</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[keys&#95;first, keys&#95;last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort&#95;by&#95;key</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort&#95;by&#95;key</code> compares key objects using the function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys using the <code>thrust::host</code> execution policy for parallelization. The keys are sorted in descending order using the <code>greater&lt;int&gt;</code> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::stable_sort_by_key(thrust::host, keys, keys + N, values, thrust::greater<int>());\n// keys is now   {  8,   7,   5,   4,   2,   1}\n// values is now {'d', 'f', 'e', 'b', 'c', 'a'}\n```",
      "explicit": false,
      "fullname": "sorting::stable_sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 861
      },
      "name": "stable_sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1gac4a39358dd978c65cf48b58ffdede6fd",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort\">stable&#95;sort</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "stable_sort_by_key",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "/thrust/api/groups/group__sorting.html#function-stable_sort_by_key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable_sort_by_key",
      "argsString": "(RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void stable_sort_by_key",
      "deleted": false,
      "details": "<code>stable&#95;sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>stable&#95;sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort&#95;by&#95;key</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[keys&#95;first, keys&#95;last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort&#95;by&#95;key</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort&#95;by&#95;key</code> compares key objects using the function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys. The keys are sorted in descending order using the greater<int> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::stable_sort_by_key(keys, keys + N, values, thrust::greater<int>());\n// keys is now   {  8,   7,   5,   4,   2,   1}\n// values is now {'d', 'f', 'e', 'b', 'c', 'a'}\n```",
      "explicit": false,
      "fullname": "sorting::stable_sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 925
      },
      "name": "stable_sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "refid": "group__sorting_1ga70cb5ef705f3745b639842feafce544d",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-sort_by_key\">sort&#95;by&#95;key</a></code>",
        "<code><a href=\"/thrust/api/groups/group__sorting.html#function-stable_sort\">stable&#95;sort</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "stable_sort_by_key",
      "type": "void",
      "typePlain": "void",
      "url": "/thrust/api/groups/group__sorting.html#function-stable_sort_by_key",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "refid": "group__sorting",
  "static": false,
  "strong": false,
  "title": "Sorting",
  "url": "/thrust/api/groups/group__sorting.html",
  "visibility": "public"
}