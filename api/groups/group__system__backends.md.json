{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "system_backends",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "system",
    "kind": "group",
    "name": "system",
    "refid": "group__system",
    "title": "System",
    "url": "/api/groups/group__system.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "system",
      "kind": "group",
      "name": "system",
      "refid": "group__system",
      "title": "System",
      "url": "/api/groups/group__system.html",
      "visibility": "public"
    }
  ],
  "name": "system_backends",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "system::cpp",
      "kind": "namespace",
      "name": "system::cpp",
      "refid": "namespacesystem_1_1cpp",
      "title": "system::cpp",
      "url": "/api/namespaces/namespacesystem_1_1cpp.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::cpp</code> is a top-level alias for thrust::system::cpp. ",
      "category": "namespaces",
      "fullname": "thrust::cpp",
      "kind": "namespace",
      "name": "thrust::cpp",
      "refid": "namespacethrust_1_1cpp",
      "summary": "thrust::cpp is a top-level alias for thrust::system::cpp. ",
      "title": "thrust::cpp",
      "url": "/api/namespaces/namespacethrust_1_1cpp.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "cpp",
      "kind": "namespace",
      "name": "cpp",
      "refid": "namespacecpp",
      "title": "cpp",
      "url": "/api/namespaces/namespacecpp.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::system::cuda</code> is the namespace containing functionality for allocating, manipulating, and deallocating memory available to Thrust's CUDA backend system. The identifiers are provided in a separate namespace underneath <code><a href=\"/api/namespaces/namespacethrust_1_1system.html\">thrust::system</a></code> for import convenience but are also aliased in the top-level <code><a href=\"/api/namespaces/namespacethrust_1_1cuda.html\">thrust::cuda</a></code> namespace for easy access. ",
      "category": "namespaces",
      "fullname": "thrust::system::cuda",
      "kind": "namespace",
      "name": "thrust::system::cuda",
      "refid": "namespacethrust_1_1system_1_1cuda",
      "summary": "thrust::system::cuda is the namespace containing functionality for allocating, manipulating, and deallocating memory available to Thrust's CUDA backend system. The identifiers are provided in a separate namespace underneath thrust::system for import convenience but are also aliased in the top-level thrust::cuda namespace for easy access. ",
      "title": "thrust::system::cuda",
      "url": "/api/namespaces/namespacethrust_1_1system_1_1cuda.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "system",
      "kind": "namespace",
      "name": "system",
      "refid": "namespacesystem",
      "title": "system",
      "url": "/api/namespaces/namespacesystem.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "system::omp",
      "kind": "namespace",
      "name": "system::omp",
      "refid": "namespacesystem_1_1omp",
      "title": "system::omp",
      "url": "/api/namespaces/namespacesystem_1_1omp.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::omp</code> is a top-level alias for thrust::system::omp. ",
      "category": "namespaces",
      "fullname": "thrust::omp",
      "kind": "namespace",
      "name": "thrust::omp",
      "refid": "namespacethrust_1_1omp",
      "summary": "thrust::omp is a top-level alias for thrust::system::omp. ",
      "title": "thrust::omp",
      "url": "/api/namespaces/namespacethrust_1_1omp.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "omp",
      "kind": "namespace",
      "name": "omp",
      "refid": "namespaceomp",
      "title": "omp",
      "url": "/api/namespaces/namespaceomp.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "system::tbb",
      "kind": "namespace",
      "name": "system::tbb",
      "refid": "namespacesystem_1_1tbb",
      "title": "system::tbb",
      "url": "/api/namespaces/namespacesystem_1_1tbb.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::tbb</code> is a top-level alias for thrust::system::tbb. ",
      "category": "namespaces",
      "fullname": "thrust::tbb",
      "kind": "namespace",
      "name": "thrust::tbb",
      "refid": "namespacethrust_1_1tbb",
      "summary": "thrust::tbb is a top-level alias for thrust::system::tbb. ",
      "title": "thrust::tbb",
      "url": "/api/namespaces/namespacethrust_1_1tbb.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "tbb",
      "kind": "namespace",
      "name": "tbb",
      "refid": "namespacetbb",
      "title": "tbb",
      "url": "/api/namespaces/namespacetbb.html",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "system",
    "kind": "group",
    "name": "system",
    "refid": "group__system",
    "title": "System",
    "url": "/api/groups/group__system.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "system",
      "kind": "group",
      "name": "system",
      "refid": "group__system",
      "title": "System",
      "url": "/api/groups/group__system.html",
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#using-pointer",
      "category": "types",
      "const": false,
      "definition": "using system::cpp::pointer = typedef thrust::pointer< T, thrust::system::cpp::tag, thrust::tagged_reference<T, thrust::system::cpp::tag> >",
      "details": "<code>cpp::pointer</code> stores a pointer to an object allocated in memory accessible by the <code>cpp</code> system. This type provides type safety when dispatching algorithms on ranges resident in <code>cpp</code> memory.\n\n<code>cpp::pointer</code> has pointer semantics: it may be dereferenced and manipulated with pointer arithmetic.\n\n<code>cpp::pointer</code> can be created with the function <code>cpp::malloc</code>, or by explicitly calling its constructor with a raw pointer.\n\nThe raw pointer encapsulated by a <code>cpp::pointer</code> may be obtained by eiter its <code>get</code> member function or the <code>raw&#95;pointer&#95;cast</code> function.",
      "explicit": false,
      "fullname": "system_backends::pointer",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/system/cpp/pointer.h",
        "bodyStart": 60,
        "column": 1,
        "file": "thrust/system/cpp/pointer.h",
        "line": 56
      },
      "name": "pointer",
      "note": [
        "<code>cpp::pointer</code> is not a \"smart\" pointer; it is the programmer's responsibility to deallocate memory pointed to by <code>cpp::pointer</code>."
      ],
      "override": false,
      "refid": "group__system__backends_1gaeabad2fc2df3c2e5b702c5b9f0c69d21",
      "see": [
        "cpp::malloc ",
        "cpp::free ",
        "<a href=\"/api/groups/group__memory__management.html#function-raw_pointer_cast\">raw_pointer_cast</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "specifies the type of the pointee."
        }
      ],
      "title": "pointer",
      "type": "thrust::pointer< T, thrust::system::cpp::tag, thrust::tagged_reference< T, thrust::system::cpp::tag > >",
      "typePlain": "thrust::pointer< T, thrust::system::cpp::tag, thrust::tagged_reference< T, thrust::system::cpp::tag > >",
      "url": "/api/groups/group__system__backends.html#using-pointer",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-universal_pointer",
      "category": "types",
      "const": false,
      "definition": "using system::cpp::universal_pointer = typedef thrust::pointer< T, thrust::system::cpp::tag, typename std::add_lvalue_reference<T>::type >",
      "details": "<code>cpp::universal&#95;pointer</code> stores a pointer to an object allocated in memory accessible by the <code>cpp</code> system and host systems.\n\n<code>cpp::universal&#95;pointer</code> has pointer semantics: it may be dereferenced and manipulated with pointer arithmetic.\n\n<code>cpp::universal&#95;pointer</code> can be created with <code>cpp::universal&#95;allocator</code> or by explicitly calling its constructor with a raw pointer.\n\nThe raw pointer encapsulated by a <code>cpp::universal&#95;pointer</code> may be obtained by eiter its <code>get</code> member function or the <code>raw&#95;pointer&#95;cast</code> function.",
      "explicit": false,
      "fullname": "system_backends::universal_pointer",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/system/cpp/pointer.h",
        "bodyStart": 89,
        "column": 1,
        "file": "thrust/system/cpp/pointer.h",
        "line": 85
      },
      "name": "universal_pointer",
      "note": [
        "<code>cpp::universal&#95;pointer</code> is not a \"smart\" pointer; it is the programmer's responsibility to deallocate memory pointed to by <code>cpp::universal&#95;pointer</code>."
      ],
      "override": false,
      "refid": "group__system__backends_1ga5f71b6b61a680a8449cda6fcbe2f3f85",
      "see": [
        "cpp::universal_allocator ",
        "<a href=\"/api/groups/group__memory__management.html#function-raw_pointer_cast\">raw_pointer_cast</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "specifies the type of the pointee."
        }
      ],
      "title": "universal_pointer",
      "type": "thrust::pointer< T, thrust::system::cpp::tag, typename std::add_lvalue_reference< T >::type >",
      "typePlain": "thrust::pointer< T, thrust::system::cpp::tag, typename std::add_lvalue_reference< T >::type >",
      "url": "/api/groups/group__system__backends.html#using-universal_pointer",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-reference",
      "category": "types",
      "const": false,
      "definition": "using system::cpp::reference = typedef thrust::reference<T, thrust::system::cpp::tag>",
      "details": "<code>reference</code> is a wrapped reference to an object stored in memory available to the <code>cpp</code> system. <code>reference</code> is the type of the result of dereferencing a <code>cpp::pointer</code>.",
      "explicit": false,
      "fullname": "system_backends::reference",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/system/cpp/pointer.h",
        "bodyStart": 98,
        "column": 1,
        "file": "thrust/system/cpp/pointer.h",
        "line": 98
      },
      "name": "reference",
      "override": false,
      "refid": "group__system__backends_1gaadd2b2c942d482beceeea9429cb2acaa",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "Specifies the type of the referenced object. "
        }
      ],
      "title": "reference",
      "type": "thrust::reference< T, thrust::system::cpp::tag >",
      "typePlain": "thrust::reference< T, thrust::system::cpp::tag >",
      "url": "/api/groups/group__system__backends.html#using-reference",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-pointer",
      "category": "types",
      "const": false,
      "definition": "using system::omp::pointer = typedef thrust::pointer< T, thrust::system::omp::tag, thrust::tagged_reference<T, thrust::system::omp::tag> >",
      "details": "<code>omp::pointer</code> stores a pointer to an object allocated in memory accessible by the <code>omp</code> system. This type provides type safety when dispatching algorithms on ranges resident in <code>omp</code> memory.\n\n<code>omp::pointer</code> has pointer semantics: it may be dereferenced and manipulated with pointer arithmetic.\n\n<code>omp::pointer</code> can be created with the function <code>omp::malloc</code>, or by explicitly calling its constructor with a raw pointer.\n\nThe raw pointer encapsulated by a <code>omp::pointer</code> may be obtained by eiter its <code>get</code> member function or the <code>raw&#95;pointer&#95;cast</code> function.",
      "explicit": false,
      "fullname": "system_backends::pointer",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/system/omp/pointer.h",
        "bodyStart": 60,
        "column": 1,
        "file": "thrust/system/omp/pointer.h",
        "line": 56
      },
      "name": "pointer",
      "note": [
        "<code>omp::pointer</code> is not a \"smart\" pointer; it is the programmer's responsibility to deallocate memory pointed to by <code>omp::pointer</code>."
      ],
      "override": false,
      "refid": "group__system__backends_1gaefcf84059bd5c196af9184c19d185873",
      "see": [
        "omp::malloc ",
        "omp::free ",
        "<a href=\"/api/groups/group__memory__management.html#function-raw_pointer_cast\">raw_pointer_cast</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "specifies the type of the pointee."
        }
      ],
      "title": "pointer",
      "type": "thrust::pointer< T, thrust::system::omp::tag, thrust::tagged_reference< T, thrust::system::omp::tag > >",
      "typePlain": "thrust::pointer< T, thrust::system::omp::tag, thrust::tagged_reference< T, thrust::system::omp::tag > >",
      "url": "/api/groups/group__system__backends.html#using-pointer",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-universal_pointer",
      "category": "types",
      "const": false,
      "definition": "using system::omp::universal_pointer = typedef thrust::pointer< T, thrust::system::omp::tag, typename std::add_lvalue_reference<T>::type >",
      "details": "<code>omp::universal&#95;pointer</code> stores a pointer to an object allocated in memory accessible by the <code>omp</code> system and host systems.\n\n<code>omp::universal&#95;pointer</code> has pointer semantics: it may be dereferenced and manipulated with pointer arithmetic.\n\n<code>omp::universal&#95;pointer</code> can be created with <code>omp::universal&#95;allocator</code> or by explicitly calling its constructor with a raw pointer.\n\nThe raw pointer encapsulated by a <code>omp::universal&#95;pointer</code> may be obtained by eiter its <code>get</code> member function or the <code>raw&#95;pointer&#95;cast</code> function.",
      "explicit": false,
      "fullname": "system_backends::universal_pointer",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/system/omp/pointer.h",
        "bodyStart": 89,
        "column": 1,
        "file": "thrust/system/omp/pointer.h",
        "line": 85
      },
      "name": "universal_pointer",
      "note": [
        "<code>omp::universal&#95;pointer</code> is not a \"smart\" pointer; it is the programmer's responsibility to deallocate memory pointed to by <code>omp::universal&#95;pointer</code>."
      ],
      "override": false,
      "refid": "group__system__backends_1gaa0dcd4c04faaf4a08e080099fe1aa203",
      "see": [
        "omp::universal_allocator ",
        "<a href=\"/api/groups/group__memory__management.html#function-raw_pointer_cast\">raw_pointer_cast</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "specifies the type of the pointee."
        }
      ],
      "title": "universal_pointer",
      "type": "thrust::pointer< T, thrust::system::omp::tag, typename std::add_lvalue_reference< T >::type >",
      "typePlain": "thrust::pointer< T, thrust::system::omp::tag, typename std::add_lvalue_reference< T >::type >",
      "url": "/api/groups/group__system__backends.html#using-universal_pointer",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-reference",
      "category": "types",
      "const": false,
      "definition": "using system::omp::reference = typedef thrust::tagged_reference<T, thrust::system::omp::tag>",
      "details": "<code>reference</code> is a wrapped reference to an object stored in memory available to the <code>omp</code> system. <code>reference</code> is the type of the result of dereferencing a <code>omp::pointer</code>.",
      "explicit": false,
      "fullname": "system_backends::reference",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/system/omp/pointer.h",
        "bodyStart": 98,
        "column": 1,
        "file": "thrust/system/omp/pointer.h",
        "line": 98
      },
      "name": "reference",
      "override": false,
      "refid": "group__system__backends_1gaf25be128ddd4b68cd38e947d7612c21f",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "Specifies the type of the referenced object. "
        }
      ],
      "title": "reference",
      "type": "thrust::tagged_reference< T, thrust::system::omp::tag >",
      "typePlain": "thrust::tagged_reference< T, thrust::system::omp::tag >",
      "url": "/api/groups/group__system__backends.html#using-reference",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-pointer",
      "category": "types",
      "const": false,
      "definition": "using system::tbb::pointer = typedef thrust::pointer< T, thrust::system::tbb::tag, thrust::tagged_reference<T, thrust::system::tbb::tag> >",
      "details": "<code>tbb::pointer</code> stores a pointer to an object allocated in memory accessible by the <code>tbb</code> system. This type provides type safety when dispatching algorithms on ranges resident in <code>tbb</code> memory.\n\n<code>tbb::pointer</code> has pointer semantics: it may be dereferenced and manipulated with pointer arithmetic.\n\n<code>tbb::pointer</code> can be created with the function <code>tbb::malloc</code>, or by explicitly calling its constructor with a raw pointer.\n\nThe raw pointer encapsulated by a <code>tbb::pointer</code> may be obtained by eiter its <code>get</code> member function or the <code>raw&#95;pointer&#95;cast</code> function.",
      "explicit": false,
      "fullname": "system_backends::pointer",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/system/tbb/pointer.h",
        "bodyStart": 60,
        "column": 1,
        "file": "thrust/system/tbb/pointer.h",
        "line": 56
      },
      "name": "pointer",
      "note": [
        "<code>tbb::pointer</code> is not a \"smart\" pointer; it is the programmer's responsibility to deallocate memory pointed to by <code>tbb::pointer</code>."
      ],
      "override": false,
      "refid": "group__system__backends_1ga726e3824c3283010f8bb8ba057f27450",
      "see": [
        "tbb::malloc ",
        "tbb::free ",
        "<a href=\"/api/groups/group__memory__management.html#function-raw_pointer_cast\">raw_pointer_cast</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "specifies the type of the pointee."
        }
      ],
      "title": "pointer",
      "type": "thrust::pointer< T, thrust::system::tbb::tag, thrust::tagged_reference< T, thrust::system::tbb::tag > >",
      "typePlain": "thrust::pointer< T, thrust::system::tbb::tag, thrust::tagged_reference< T, thrust::system::tbb::tag > >",
      "url": "/api/groups/group__system__backends.html#using-pointer",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-universal_pointer",
      "category": "types",
      "const": false,
      "definition": "using system::tbb::universal_pointer = typedef thrust::pointer< T, thrust::system::tbb::tag, typename std::add_lvalue_reference<T>::type >",
      "details": "<code>tbb::universal&#95;pointer</code> stores a pointer to an object allocated in memory accessible by the <code>tbb</code> system and host systems.\n\n<code>tbb::universal&#95;pointer</code> has pointer semantics: it may be dereferenced and manipulated with pointer arithmetic.\n\n<code>tbb::universal&#95;pointer</code> can be created with <code>tbb::universal&#95;allocator</code> or by explicitly calling its constructor with a raw pointer.\n\nThe raw pointer encapsulated by a <code>tbb::universal&#95;pointer</code> may be obtained by eiter its <code>get</code> member function or the <code>raw&#95;pointer&#95;cast</code> function.",
      "explicit": false,
      "fullname": "system_backends::universal_pointer",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/system/tbb/pointer.h",
        "bodyStart": 89,
        "column": 1,
        "file": "thrust/system/tbb/pointer.h",
        "line": 85
      },
      "name": "universal_pointer",
      "note": [
        "<code>tbb::universal&#95;pointer</code> is not a \"smart\" pointer; it is the programmer's responsibility to deallocate memory pointed to by <code>tbb::universal&#95;pointer</code>."
      ],
      "override": false,
      "refid": "group__system__backends_1ga76b32360d217297ac939c722d4dd0060",
      "see": [
        "tbb::universal_allocator ",
        "<a href=\"/api/groups/group__memory__management.html#function-raw_pointer_cast\">raw_pointer_cast</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "specifies the type of the pointee."
        }
      ],
      "title": "universal_pointer",
      "type": "thrust::pointer< T, thrust::system::tbb::tag, typename std::add_lvalue_reference< T >::type >",
      "typePlain": "thrust::pointer< T, thrust::system::tbb::tag, typename std::add_lvalue_reference< T >::type >",
      "url": "/api/groups/group__system__backends.html#using-universal_pointer",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-reference",
      "category": "types",
      "const": false,
      "definition": "using system::tbb::reference = typedef thrust::tagged_reference<T, thrust::system::tbb::tag>",
      "details": "<code>reference</code> is a wrapped reference to an object stored in memory available to the <code>tbb</code> system. <code>reference</code> is the type of the result of dereferencing a <code>tbb::pointer</code>.",
      "explicit": false,
      "fullname": "system_backends::reference",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/system/tbb/pointer.h",
        "bodyStart": 98,
        "column": 1,
        "file": "thrust/system/tbb/pointer.h",
        "line": 98
      },
      "name": "reference",
      "override": false,
      "refid": "group__system__backends_1ga0352f04f75b141b9f05a8617173550d5",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "Specifies the type of the referenced object. "
        }
      ],
      "title": "reference",
      "type": "thrust::tagged_reference< T, thrust::system::tbb::tag >",
      "typePlain": "thrust::tagged_reference< T, thrust::system::tbb::tag >",
      "url": "/api/groups/group__system__backends.html#using-reference",
      "visibility": "public"
    }
  ],
  "refid": "group__system__backends",
  "static": false,
  "strong": false,
  "title": "Systems",
  "url": "/api/groups/group__system__backends.html",
  "visibility": "public"
}