{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-thrust_proclaim_contiguous_iterator",
      "brief": "Declares that the iterator <code>Iterator</code> is <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a> by specializing <code><a href=\"/thrust/api/classes/structproclaim__contiguous__iterator.html\">proclaim&#95;contiguous&#95;iterator</a></code>. ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "THRUST_PROCLAIM_CONTIGUOUS_ITERATOR",
      "hasDetails": true,
      "initializer": "  THRUST_NAMESPACE_BEGIN                                                      \\\n  template <>                                                                 \\\n  struct <a href=\"/thrust/api/classes/structproclaim__contiguous__iterator.html\">proclaim_contiguous_iterator</a><Iterator>                               \\\n      : THRUST_NS_QUALIFIER::true_type {};                                    \\\n  THRUST_NAMESPACE_END                                                        \\",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "thrust/type_traits/is_contiguous_iterator.h",
        "bodyStart": 119,
        "column": 9,
        "file": "thrust/type_traits/is_contiguous_iterator.h",
        "line": 119
      },
      "name": "THRUST_PROCLAIM_CONTIGUOUS_ITERATOR",
      "override": false,
      "params": [
        {
          "name": "Iterator",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "group__type__traits_1ga6481610468498fdee166a05ec3f6e270",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_contiguous_iterator\">is_contiguous_iterator</a>",
        "<a href=\"/thrust/api/classes/structproclaim__contiguous__iterator.html\">proclaim_contiguous_iterator</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Declares that the iterator Iterator is ContiguousIterator by specializing proclaim_contiguous_iterator. ",
      "title": "THRUST_PROCLAIM_CONTIGUOUS_ITERATOR",
      "url": "/thrust/api/groups/group__type__traits.html#define-thrust_proclaim_contiguous_iterator",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-thrust_proclaim_trivially_relocatable",
      "brief": "Declares that the type <code>T</code> is <a href=\"https://wg21.link/P1144\">_TriviallyRelocatable_</a>, aka it can be bitwise copied with a facility like <a href=\"https://en.cppreference.com/w/cpp/string/byte/memcpy\"><code>std::memcpy</code></a>, by specializing <code><a href=\"/thrust/api/classes/structproclaim__trivially__relocatable.html\">proclaim&#95;trivially&#95;relocatable</a></code>. ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE",
      "hasDetails": true,
      "initializer": "  THRUST_NAMESPACE_BEGIN                                                      \\\n  template <>                                                                 \\\n  struct <a href=\"/thrust/api/classes/structproclaim__trivially__relocatable.html\">proclaim_trivially_relocatable</a><T> : THRUST_NS_QUALIFIER::true_type   \\\n  {};                                                                         \\\n  THRUST_NAMESPACE_END                                                        \\",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "thrust/type_traits/is_trivially_relocatable.h",
        "bodyStart": 226,
        "column": 9,
        "file": "thrust/type_traits/is_trivially_relocatable.h",
        "line": 226
      },
      "name": "THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE",
      "override": false,
      "params": [
        {
          "name": "T",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "group__type__traits_1gafaa6e65861d2a568ea736856eca5d351",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_indirectly_trivially_relocatable_to\">is_indirectly_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable\">is_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable_to\">is_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/classes/structproclaim__trivially__relocatable.html\">proclaim_trivially_relocatable</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Declares that the type T is TriviallyRelocatable, aka it can be bitwise copied with a facility like std::memcpy, by specializing proclaim_trivially_relocatable. ",
      "title": "THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE",
      "url": "/thrust/api/groups/group__type__traits.html#define-thrust_proclaim_trivially_relocatable",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "type_traits",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "utility",
    "kind": "group",
    "name": "utility",
    "refid": "group__utility",
    "title": "Utility",
    "url": "/thrust/api/groups/group__utility.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "utility",
      "kind": "group",
      "name": "utility",
      "refid": "group__utility",
      "title": "Utility",
      "url": "/thrust/api/groups/group__utility.html",
      "visibility": "public"
    }
  ],
  "name": "type_traits",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "utility",
    "kind": "group",
    "name": "utility",
    "refid": "group__utility",
    "title": "Utility",
    "url": "/thrust/api/groups/group__utility.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "utility",
      "kind": "group",
      "name": "utility",
      "refid": "group__utility",
      "title": "Utility",
      "url": "/thrust/api/groups/group__utility.html",
      "visibility": "public"
    }
  ],
  "publicAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-is_contiguous_iterator_v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>Iterator</code> satisfies <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a>, aka it points to elements that are contiguous in memory, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool is_contiguous_iterator_v",
      "explicit": false,
      "fullname": "type_traits::is_contiguous_iterator_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-is_contiguous_iterator\">is_contiguous_iterator</a><Iterator>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/is_contiguous_iterator.h",
        "bodyStart": 98,
        "column": 16,
        "file": "thrust/type_traits/is_contiguous_iterator.h",
        "line": 98
      },
      "name": "is_contiguous_iterator_v",
      "override": false,
      "refid": "group__type__traits_1ga1d21641bf7dc946d0c8ef3c9fc0e260c",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_contiguous_iterator\">is_contiguous_iterator</a>",
        "<a href=\"/thrust/api/classes/structproclaim__contiguous__iterator.html\">proclaim_contiguous_iterator</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#define-thrust_proclaim_contiguous_iterator\">THRUST_PROCLAIM_CONTIGUOUS_ITERATOR</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if Iterator satisfies ContiguousIterator, aka it points to elements that are contiguous in memory, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename Iterator",
          "typePlain": "typename Iterator"
        }
      ],
      "title": "is_contiguous_iterator_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-is_contiguous_iterator_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is_execution_policy_v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is an _ExecutionPolicy_ and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool is_execution_policy_v",
      "explicit": false,
      "fullname": "type_traits::is_execution_policy_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-is_execution_policy\">is_execution_policy</a><T>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/is_execution_policy.h",
        "bodyStart": 59,
        "column": 16,
        "file": "thrust/type_traits/is_execution_policy.h",
        "line": 59
      },
      "name": "is_execution_policy_v",
      "override": false,
      "refid": "group__type__traits_1gaad6af00a53f6bf646d9f6a0679fcaaba",
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is an ExecutionPolicy and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_execution_policy_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-is_execution_policy_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is_operator_less_function_object_v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool is_operator_less_function_object_v",
      "explicit": false,
      "fullname": "type_traits::is_operator_less_function_object_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_function_object\">is_operator_less_function_object</a><T>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 91,
        "column": 16,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 90
      },
      "name": "is_operator_less_function_object_v",
      "override": false,
      "refid": "group__type__traits_1ga104145169072f3e7d13211185ea66b11",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_function_object\">is_operator_less_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_greater_function_object\">is_operator_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_or_greater_function_object\">is_operator_less_or_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_plus_function_object\">is_operator_plus_function_object</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a BinaryPredicate equivalent to operator<, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-is_operator_less_function_object_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is_operator_greater_function_object_v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&gt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool is_operator_greater_function_object_v",
      "explicit": false,
      "fullname": "type_traits::is_operator_greater_function_object_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_greater_function_object\">is_operator_greater_function_object</a><T>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 128,
        "column": 16,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 127
      },
      "name": "is_operator_greater_function_object_v",
      "override": false,
      "refid": "group__type__traits_1gac8db6251fabf3507bbbefb0da705139a",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_greater_function_object\">is_operator_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_function_object\">is_operator_less_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_or_greater_function_object\">is_operator_less_or_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_plus_function_object\">is_operator_plus_function_object</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a BinaryPredicate equivalent to operator>, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_greater_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-is_operator_greater_function_object_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is_operator_less_or_greater_function_object_v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code> or <code>operator&gt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool is_operator_less_or_greater_function_object_v",
      "explicit": false,
      "fullname": "type_traits::is_operator_less_or_greater_function_object_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_or_greater_function_object\">is_operator_less_or_greater_function_object</a><T>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 169,
        "column": 16,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 168
      },
      "name": "is_operator_less_or_greater_function_object_v",
      "override": false,
      "refid": "group__type__traits_1ga1b04a404921df8986b3ce1644ad95638",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_or_greater_function_object\">is_operator_less_or_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_function_object\">is_operator_less_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_greater_function_object\">is_operator_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_plus_function_object\">is_operator_plus_function_object</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a BinaryPredicate equivalent to operator< or operator>, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_or_greater_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-is_operator_less_or_greater_function_object_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is_operator_plus_function_object_v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/FunctionObject\">FunctionObject</a> equivalent to <code>operator&lt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool is_operator_plus_function_object_v",
      "explicit": false,
      "fullname": "type_traits::is_operator_plus_function_object_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_plus_function_object\">is_operator_plus_function_object</a><T>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_plus_function_object.h",
        "bodyStart": 88,
        "column": 16,
        "file": "thrust/type_traits/is_operator_plus_function_object.h",
        "line": 87
      },
      "name": "is_operator_plus_function_object_v",
      "override": false,
      "refid": "group__type__traits_1gaa5d97cf4129fd585f9798c7b328b405c",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_plus_function_object\">is_operator_plus_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_function_object\">is_operator_less_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_greater_function_object\">is_operator_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_or_greater_function_object\">is_operator_less_or_greater_function_object</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a FunctionObject equivalent to operator<, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_plus_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-is_operator_plus_function_object_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is_trivially_relocatable_v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is <a href=\"https://wg21.link/P1144\">_TriviallyRelocatable_</a>, aka can be bitwise copied with a facility like <a href=\"https://en.cppreference.com/w/cpp/string/byte/memcpy\"><code>std::memcpy</code></a>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool is_trivially_relocatable_v",
      "explicit": false,
      "fullname": "type_traits::is_trivially_relocatable_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable\">is_trivially_relocatable</a><T>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/is_trivially_relocatable.h",
        "bodyStart": 98,
        "column": 16,
        "file": "thrust/type_traits/is_trivially_relocatable.h",
        "line": 98
      },
      "name": "is_trivially_relocatable_v",
      "override": false,
      "refid": "group__type__traits_1gaadbf3eecf7041f00623116966e2a0d2e",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable\">is_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable_to\">is_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_indirectly_trivially_relocatable_to\">is_indirectly_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/classes/structproclaim__trivially__relocatable.html\">proclaim_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#define-thrust_proclaim_trivially_relocatable\">THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is TriviallyRelocatable, aka can be bitwise copied with a facility like std::memcpy, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_trivially_relocatable_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-is_trivially_relocatable_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is_trivially_relocatable_to_v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>From</code> is <a href=\"https://wg21.link/P1144\">_TriviallyRelocatable_</a>, to <code>To</code>, aka can be bitwise copied with a facility like <a href=\"https://en.cppreference.com/w/cpp/string/byte/memcpy\"><code>std::memcpy</code></a>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool is_trivially_relocatable_to_v",
      "explicit": false,
      "fullname": "type_traits::is_trivially_relocatable_to_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable_to\">is_trivially_relocatable_to</a><From, To>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/is_trivially_relocatable.h",
        "bodyStart": 144,
        "column": 16,
        "file": "thrust/type_traits/is_trivially_relocatable.h",
        "line": 143
      },
      "name": "is_trivially_relocatable_to_v",
      "override": false,
      "refid": "group__type__traits_1ga976874b6d201324374a425ea3e149717",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable_to\">is_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable\">is_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_indirectly_trivially_relocatable_to\">is_indirectly_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/classes/structproclaim__trivially__relocatable.html\">proclaim_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#define-thrust_proclaim_trivially_relocatable\">THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if From is TriviallyRelocatable, to To, aka can be bitwise copied with a facility like std::memcpy, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename From",
          "typePlain": "typename From"
        },
        {
          "name": "",
          "type": "typename To",
          "typePlain": "typename To"
        }
      ],
      "title": "is_trivially_relocatable_to_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-is_trivially_relocatable_to_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is_indirectly_trivially_relocate_to_v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if the element type of <code>FromIterator</code> is <a href=\"https://wg21.link/P1144\">_TriviallyRelocatable_</a>, to the element type of <code>ToIterator</code>, aka can be bitwise copied with a facility like <a href=\"https://en.cppreference.com/w/cpp/string/byte/memcpy\"><code>std::memcpy</code></a>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool is_indirectly_trivially_relocate_to_v",
      "explicit": false,
      "fullname": "type_traits::is_indirectly_trivially_relocate_to_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-is_indirectly_trivially_relocatable_to\">is_indirectly_trivially_relocatable_to</a><FromIterator, ToIterator>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/is_trivially_relocatable.h",
        "bodyStart": 198,
        "column": 16,
        "file": "thrust/type_traits/is_trivially_relocatable.h",
        "line": 197
      },
      "name": "is_indirectly_trivially_relocate_to_v",
      "override": false,
      "refid": "group__type__traits_1gabcd6afbaf75214214871bb792dc76cb6",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_indirectly_trivially_relocatable_to\">is_indirectly_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable\">is_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable_to\">is_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/classes/structproclaim__trivially__relocatable.html\">proclaim_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#define-thrust_proclaim_trivially_relocatable\">THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if the element type of FromIterator is TriviallyRelocatable, to the element type of ToIterator, aka can be bitwise copied with a facility like std::memcpy, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename FromIterator",
          "typePlain": "typename FromIterator"
        },
        {
          "name": "",
          "type": "typename ToIterator",
          "typePlain": "typename ToIterator"
        }
      ],
      "title": "is_indirectly_trivially_relocate_to_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-is_indirectly_trivially_relocate_to_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-conjunction_v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... && Ts::value)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool conjunction_v",
      "explicit": false,
      "fullname": "type_traits::conjunction_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-conjunction\">conjunction</a><Ts...>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 86,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 86
      },
      "name": "conjunction_v",
      "override": false,
      "refid": "group__type__traits_1ga5672914b2f1f9c1c4c50ded53a8db2e3",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-conjunction\">conjunction</a>",
        "<a href=\"/thrust/api/classes/structconjunction__value.html\">conjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/conjunction\"><code>std::conjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... && Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "conjunction_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-conjunction_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-disjunction_v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... || Ts::value)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool disjunction_v",
      "explicit": false,
      "fullname": "type_traits::disjunction_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-disjunction\">disjunction</a><Ts...>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 128,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 128
      },
      "name": "disjunction_v",
      "override": false,
      "refid": "group__type__traits_1gabb3abcd15bf9ea4a0629b7e03498e1e1",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-disjunction\">disjunction</a>",
        "<a href=\"/thrust/api/classes/structdisjunction__value.html\">disjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/disjunction\"><code>std::disjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... || Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "disjunction_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-disjunction_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-negation_v",
      "brief": "<code>constexpr bool</code> whose value is <code>!Ts::value</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool negation_v",
      "explicit": false,
      "fullname": "type_traits::negation_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/groups/group__type__traits.html#using-negation\">negation</a><T>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 163,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 163
      },
      "name": "negation_v",
      "override": false,
      "refid": "group__type__traits_1ga3bef7b75bd1375e11a158bc94cbc4fa3",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-negation\">negation</a>",
        "<a href=\"/thrust/api/classes/structnegation__value.html\">negation_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/negation\"><code>std::negation</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is !Ts::value. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "negation_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-negation_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-conjunction_value_v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... && Bs)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool conjunction_value_v",
      "explicit": false,
      "fullname": "type_traits::conjunction_value_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/classes/structconjunction__value.html\">conjunction_value</a><Bs...>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 186,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 186
      },
      "name": "conjunction_value_v",
      "override": false,
      "refid": "group__type__traits_1ga24c201ff064f802b95c1198191b0220a",
      "see": [
        "<a href=\"/thrust/api/classes/structconjunction__value.html\">conjunction_value</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-conjunction\">conjunction</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/conjunction\"><code>std::conjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... && Bs). ",
      "templateParams": [
        {
          "name": "Bs",
          "type": "bool...",
          "typePlain": "bool..."
        }
      ],
      "title": "conjunction_value_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-conjunction_value_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-disjunction_value_v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... || Bs)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool disjunction_value_v",
      "explicit": false,
      "fullname": "type_traits::disjunction_value_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/classes/structdisjunction__value.html\">disjunction_value</a><Bs...>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 225,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 225
      },
      "name": "disjunction_value_v",
      "override": false,
      "refid": "group__type__traits_1ga69726e1944d061a4b41ee49b69c71f37",
      "see": [
        "<a href=\"/thrust/api/classes/structdisjunction__value.html\">disjunction_value</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-disjunction\">disjunction</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/disjunction\"><code>std::disjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... || Bs). ",
      "templateParams": [
        {
          "name": "Bs",
          "type": "bool...",
          "typePlain": "bool..."
        }
      ],
      "title": "disjunction_value_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-disjunction_value_v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-negation_value_v",
      "brief": "<code>constexpr bool</code> whose value is <code>!Ts::value</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool negation_value_v",
      "explicit": false,
      "fullname": "type_traits::negation_value_v",
      "hasDetails": true,
      "initializer": "= <a href=\"/thrust/api/classes/structnegation__value.html\">negation_value</a><B>::value",
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 264,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 264
      },
      "name": "negation_value_v",
      "override": false,
      "refid": "group__type__traits_1ga288e2f0f3fde973963159dc432947177",
      "see": [
        "<a href=\"/thrust/api/classes/structnegation__value.html\">negation_value</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-negation\">negation</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/negation\"><code>std::negation</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is !Ts::value. ",
      "templateParams": [
        {
          "name": "B",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "title": "negation_value_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "/thrust/api/groups/group__type__traits.html#variable-negation_value_v",
      "visibility": "public"
    }
  ],
  "publicClasses": [
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "false_type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "brief": "Customization point that can be customized to indicate that an iterator type <code>Iterator</code> satisfies <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a>, aka it points to elements that are contiguous in memory. ",
      "category": "classes",
      "fullname": "proclaim_contiguous_iterator",
      "kind": "struct",
      "name": "proclaim_contiguous_iterator",
      "refid": "structproclaim__contiguous__iterator",
      "summary": "Customization point that can be customized to indicate that an iterator type Iterator satisfies ContiguousIterator, aka it points to elements that are contiguous in memory. ",
      "title": "proclaim_contiguous_iterator",
      "url": "/thrust/api/classes/structproclaim__contiguous__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "false_type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "brief": "<a href=\"http://eel.is/c++draft/namespace.std#def:customization_point\">_customization point_</a> that can be specialized customized to indicate that a type <code>T</code> is <a href=\"https://wg21.link/P1144\">_TriviallyRelocatable_</a>, aka it can be bitwise copied with a facility like <a href=\"https://en.cppreference.com/w/cpp/string/byte/memcpy\"><code>std::memcpy</code></a>. ",
      "category": "classes",
      "fullname": "proclaim_trivially_relocatable",
      "kind": "struct",
      "name": "proclaim_trivially_relocatable",
      "refid": "structproclaim__trivially__relocatable",
      "summary": "customization point that can be specialized customized to indicate that a type T is TriviallyRelocatable, aka it can be bitwise copied with a facility like std::memcpy. ",
      "title": "proclaim_trivially_relocatable",
      "url": "/thrust/api/classes/structproclaim__trivially__relocatable.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... && Bs)</code>. ",
      "category": "classes",
      "fullname": "conjunction_value",
      "kind": "struct",
      "name": "conjunction_value",
      "refid": "structconjunction__value",
      "summary": "std::integral_constant whose value is (... && Bs). ",
      "title": "conjunction_value",
      "url": "/thrust/api/classes/structconjunction__value.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... || Bs)</code>. ",
      "category": "classes",
      "fullname": "disjunction_value",
      "kind": "struct",
      "name": "disjunction_value",
      "refid": "structdisjunction__value",
      "summary": "std::integral_constant whose value is (... || Bs). ",
      "title": "disjunction_value",
      "url": "/thrust/api/classes/structdisjunction__value.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>!Bs</code>. ",
      "category": "classes",
      "fullname": "negation_value",
      "kind": "struct",
      "name": "negation_value",
      "refid": "structnegation__value",
      "summary": "std::integral_constant whose value is !Bs. ",
      "title": "negation_value",
      "url": "/thrust/api/classes/structnegation__value.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that removes <a href=\"https://en.cppreference.com/w/cpp/language/cv\">const-volatile qualifiers</a> and <a href=\"https://en.cppreference.com/w/cpp/language/reference\">references</a> from <code>T</code>. Equivalent to <code>remove&#95;cv&#95;t&lt;remove&#95;reference&#95;t&lt;T&gt;&gt;</code>. ",
      "category": "classes",
      "fullname": "remove_cvref",
      "kind": "struct",
      "name": "remove_cvref",
      "refid": "structremove__cvref",
      "summary": "UnaryTypeTrait that removes const-volatile qualifiers and references from T. Equivalent to remove_cv_t<remove_reference_t<T>>. ",
      "title": "remove_cvref",
      "url": "/thrust/api/classes/structremove__cvref.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "voider",
      "kind": "struct",
      "name": "voider",
      "refid": "structvoider",
      "title": "voider",
      "url": "/thrust/api/classes/structvoider.html",
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#using-integer_sequence",
      "brief": "A compile-time sequence of <a href=\"https://en.cppreference.com/w/cpp/language/constant_expression#Integral_constant_expression\">_integral constants_</a> of type <code>T</code> with values <code>Is...</code>. ",
      "category": "types",
      "const": false,
      "definition": "using integer_sequence =  std::integer_sequence<T, Is...>",
      "explicit": false,
      "fullname": "type_traits::integer_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 61,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 61
      },
      "name": "integer_sequence",
      "override": false,
      "refid": "group__type__traits_1ga58053a1185cfbe49e0e62462c5d5f824",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/language/constant_expression#Integral_constant_expression\">_integral constants_</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-index_sequence\">index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_integer_sequence\">make_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_integer_sequence\">make_reversed_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_index_sequence\">make_index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_index_sequence\">make_reversed_index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence_push_front\">integer_sequence_push_front</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence_push_back\">integer_sequence_push_back</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::integer&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "A compile-time sequence of integral constants of type T with values Is.... ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "Is",
          "type": "T...",
          "typePlain": "T..."
        }
      ],
      "title": "integer_sequence",
      "type": "std::integer_sequence< T, Is... >",
      "typePlain": "std::integer_sequence< T, Is... >",
      "url": "/thrust/api/groups/group__type__traits.html#using-integer_sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-index_sequence",
      "brief": "A compile-time sequence of type <a href=\"https://en.cppreference.com/w/cpp/types/size_t\">std::size_t</a> with values <code>Is...</code>. ",
      "category": "types",
      "const": false,
      "definition": "using index_sequence =  std::index_sequence<Is...>",
      "explicit": false,
      "fullname": "type_traits::index_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 95,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 95
      },
      "name": "index_sequence",
      "override": false,
      "refid": "group__type__traits_1ga3d4718cfedefc52260ba7b15da011075",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence\">integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_integer_sequence\">make_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_integer_sequence\">make_reversed_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_index_sequence\">make_index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_index_sequence\">make_reversed_index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence_push_front\">integer_sequence_push_front</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence_push_back\">integer_sequence_push_back</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::index&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "A compile-time sequence of type std::size_t with values Is.... ",
      "templateParams": [
        {
          "name": "Is",
          "type": "std::size_t...",
          "typePlain": "std::size_t..."
        }
      ],
      "title": "index_sequence",
      "type": "std::index_sequence< Is... >",
      "typePlain": "std::index_sequence< Is... >",
      "url": "/thrust/api/groups/group__type__traits.html#using-index_sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make_integer_sequence",
      "brief": "Create a new <code>integer&#95;sequence</code> with elements <code>0, 1, 2, ..., N - 1</code> of type <code>T</code>. ",
      "category": "types",
      "const": false,
      "definition": "using make_integer_sequence =  std::make_integer_sequence<T, N>",
      "explicit": false,
      "fullname": "type_traits::make_integer_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 148,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 148
      },
      "name": "make_integer_sequence",
      "override": false,
      "refid": "group__type__traits_1ga8476ee86e5283a7de8b9488585f8b7d2",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence\">integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-index_sequence\">index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_integer_sequence\">make_reversed_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_index_sequence\">make_index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_index_sequence\">make_reversed_index_sequence</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::make&#95;integer&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new integer_sequence with elements 0, 1, 2, ..., N - 1 of type T. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_integer_sequence",
      "type": "std::make_integer_sequence< T, N >",
      "typePlain": "std::make_integer_sequence< T, N >",
      "url": "/thrust/api/groups/group__type__traits.html#using-make_integer_sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make_index_sequence",
      "brief": "Create a new <code>integer&#95;sequence</code> with elements <code>0, 1, 2, ..., N - 1</code> of type <a href=\"https://en.cppreference.com/w/cpp/types/size_t\">std::size_t</a>. ",
      "category": "types",
      "const": false,
      "definition": "using make_index_sequence =  std::make_index_sequence<N>",
      "explicit": false,
      "fullname": "type_traits::make_index_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 210,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 210
      },
      "name": "make_index_sequence",
      "override": false,
      "refid": "group__type__traits_1ga547a8ac014e6931710a4c58aea196bf4",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence\">integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-index_sequence\">index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_integer_sequence\">make_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_integer_sequence\">make_reversed_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_index_sequence\">make_reversed_index_sequence</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::make&#95;index&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new integer_sequence with elements 0, 1, 2, ..., N - 1 of type std::size_t. ",
      "templateParams": [
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_index_sequence",
      "type": "std::make_index_sequence< N >",
      "typePlain": "std::make_index_sequence< N >",
      "url": "/thrust/api/groups/group__type__traits.html#using-make_index_sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make_reversed_integer_sequence",
      "brief": "Create a new <code>integer&#95;sequence</code> with elements <code>N - 1, N - 2, N - 3, ..., 0</code>. ",
      "category": "types",
      "const": false,
      "definition": "using make_reversed_integer_sequence =  typename detail::make_reversed_integer_sequence_impl<T, N>::type",
      "explicit": false,
      "fullname": "type_traits::make_reversed_integer_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 281,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 280
      },
      "name": "make_reversed_integer_sequence",
      "override": false,
      "refid": "group__type__traits_1ga82760d247ffe7cb322ba601e4fa1057a",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence\">integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-index_sequence\">index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_integer_sequence\">make_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_index_sequence\">make_index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_index_sequence\">make_reversed_index_sequence</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new integer_sequence with elements N - 1, N - 2, N - 3, ..., 0. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_reversed_integer_sequence",
      "type": "typename detail::make_reversed_integer_sequence_impl< T, N >::type",
      "typePlain": "typename detail::make_reversed_integer_sequence_impl< T, N >::type",
      "url": "/thrust/api/groups/group__type__traits.html#using-make_reversed_integer_sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make_reversed_index_sequence",
      "brief": "Create a new <code>index&#95;sequence</code> with elements <code>N - 1, N - 2, N - 3, ..., 0</code>. ",
      "category": "types",
      "const": false,
      "definition": "using make_reversed_index_sequence =  make_reversed_integer_sequence<std::size_t, N>",
      "explicit": false,
      "fullname": "type_traits::make_reversed_index_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 294,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 293
      },
      "name": "make_reversed_index_sequence",
      "override": false,
      "refid": "group__type__traits_1ga207a65f277a607caa40d2cce60970110",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence\">integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-index_sequence\">index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_integer_sequence\">make_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_integer_sequence\">make_reversed_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_index_sequence\">make_reversed_index_sequence</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new index_sequence with elements N - 1, N - 2, N - 3, ..., 0. ",
      "templateParams": [
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_reversed_index_sequence",
      "type": "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_reversed_integer_sequence\">make_reversed_integer_sequence</a>< std::size_t, N >",
      "typePlain": "make_reversed_integer_sequence< std::size_t, N >",
      "url": "/thrust/api/groups/group__type__traits.html#using-make_reversed_index_sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-integer_sequence_push_front",
      "brief": "Add a new element to the front of an <code>integer&#95;sequence</code>. ",
      "category": "types",
      "const": false,
      "definition": "using integer_sequence_push_front =  typename detail::integer_sequence_push_front_impl<T, Value, Sequence>::type",
      "explicit": false,
      "fullname": "type_traits::integer_sequence_push_front",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 305,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 304
      },
      "name": "integer_sequence_push_front",
      "override": false,
      "refid": "group__type__traits_1ga057cfcd42ffaf26b4d39986bc13f69fd",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence\">integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-index_sequence\">index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_integer_sequence\">make_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_index_sequence\">make_index_sequence</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Add a new element to the front of an integer_sequence. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "Value",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "",
          "type": "typename Sequence",
          "typePlain": "typename Sequence"
        }
      ],
      "title": "integer_sequence_push_front",
      "type": "typename detail::integer_sequence_push_front_impl< T, Value, Sequence >::type",
      "typePlain": "typename detail::integer_sequence_push_front_impl< T, Value, Sequence >::type",
      "url": "/thrust/api/groups/group__type__traits.html#using-integer_sequence_push_front",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-integer_sequence_push_back",
      "brief": "Add a new element to the back of an <code>integer&#95;sequence</code>. ",
      "category": "types",
      "const": false,
      "definition": "using integer_sequence_push_back =  typename detail::integer_sequence_push_back_impl<T, Value, Sequence>::type",
      "explicit": false,
      "fullname": "type_traits::integer_sequence_push_back",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 316,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 315
      },
      "name": "integer_sequence_push_back",
      "override": false,
      "refid": "group__type__traits_1ga663141cff59ca11699fb5fef703ca956",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-integer_sequence\">integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-index_sequence\">index_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_integer_sequence\">make_integer_sequence</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-make_index_sequence\">make_index_sequence</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Add a new element to the back of an integer_sequence. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "Value",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "",
          "type": "typename Sequence",
          "typePlain": "typename Sequence"
        }
      ],
      "title": "integer_sequence_push_back",
      "type": "typename detail::integer_sequence_push_back_impl< T, Value, Sequence >::type",
      "typePlain": "typename detail::integer_sequence_push_back_impl< T, Value, Sequence >::type",
      "url": "/thrust/api/groups/group__type__traits.html#using-integer_sequence_push_back",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is_contiguous_iterator",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>Iterator</code> satisfies <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a>, aka it points to elements that are contiguous in memory, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using is_contiguous_iterator =  detail::is_contiguous_iterator_impl<Iterator>",
      "explicit": false,
      "fullname": "type_traits::is_contiguous_iterator",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/is_contiguous_iterator.h",
        "bodyStart": 85,
        "column": 1,
        "file": "thrust/type_traits/is_contiguous_iterator.h",
        "line": 77
      },
      "name": "is_contiguous_iterator",
      "override": false,
      "refid": "group__type__traits_1ga80dc92385df42df76d103cd3a490aab0",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#variable-is_contiguous_iterator_v\">is_contiguous_iterator_v</a>",
        "<a href=\"/thrust/api/classes/structproclaim__contiguous__iterator.html\">proclaim_contiguous_iterator</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#define-thrust_proclaim_contiguous_iterator\">THRUST_PROCLAIM_CONTIGUOUS_ITERATOR</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if Iterator satisfies ContiguousIterator, aka it points to elements that are contiguous in memory, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename Iterator",
          "typePlain": "typename Iterator"
        }
      ],
      "title": "is_contiguous_iterator",
      "type": "detail::is_contiguous_iterator_impl< Iterator >",
      "typePlain": "detail::is_contiguous_iterator_impl< Iterator >",
      "url": "/thrust/api/groups/group__type__traits.html#using-is_contiguous_iterator",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is_execution_policy",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is an _ExecutionPolicy_ and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using is_execution_policy =  detail::is_base_of<detail::execution_policy_marker, T>",
      "explicit": false,
      "fullname": "type_traits::is_execution_policy",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/is_execution_policy.h",
        "bodyStart": 52,
        "column": 1,
        "file": "thrust/type_traits/is_execution_policy.h",
        "line": 44
      },
      "name": "is_execution_policy",
      "override": false,
      "refid": "group__type__traits_1ga7f9ab6c12b069a6efa133d087e95a609",
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is an ExecutionPolicy and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_execution_policy",
      "type": "detail::is_base_of< detail::execution_policy_marker, T >",
      "typePlain": "detail::is_base_of< detail::execution_policy_marker, T >",
      "url": "/thrust/api/groups/group__type__traits.html#using-is_execution_policy",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is_operator_less_function_object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using is_operator_less_function_object =  detail::is_operator_less_function_object_impl<T>",
      "explicit": false,
      "fullname": "type_traits::is_operator_less_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 77,
        "column": 1,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 69
      },
      "name": "is_operator_less_function_object",
      "override": false,
      "refid": "group__type__traits_1gacd633504e0167167807ec9d35d71b9c1",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#variable-is_operator_less_function_object_v\">is_operator_less_function_object_v</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_greater_function_object\">is_operator_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_or_greater_function_object\">is_operator_less_or_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_plus_function_object\">is_operator_plus_function_object</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a BinaryPredicate equivalent to operator<, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_function_object",
      "type": "detail::is_operator_less_function_object_impl< T >",
      "typePlain": "detail::is_operator_less_function_object_impl< T >",
      "url": "/thrust/api/groups/group__type__traits.html#using-is_operator_less_function_object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is_operator_greater_function_object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&gt;</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using is_operator_greater_function_object =  detail::is_operator_greater_function_object_impl<T>",
      "explicit": false,
      "fullname": "type_traits::is_operator_greater_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 114,
        "column": 1,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 106
      },
      "name": "is_operator_greater_function_object",
      "override": false,
      "refid": "group__type__traits_1ga354b453919716fd8616fa2c4cd688b6b",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#variable-is_operator_greater_function_object_v\">is_operator_greater_function_object_v</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_function_object\">is_operator_less_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_or_greater_function_object\">is_operator_less_or_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_plus_function_object\">is_operator_plus_function_object</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a BinaryPredicate equivalent to operator>, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_greater_function_object",
      "type": "detail::is_operator_greater_function_object_impl< T >",
      "typePlain": "detail::is_operator_greater_function_object_impl< T >",
      "url": "/thrust/api/groups/group__type__traits.html#using-is_operator_greater_function_object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is_operator_less_or_greater_function_object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code> or <code>operator&gt;</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using is_operator_less_or_greater_function_object =  integral_constant< bool , detail::is_operator_less_function_object_impl<T>::value || detail::is_operator_greater_function_object_impl<T>::value >",
      "explicit": false,
      "fullname": "type_traits::is_operator_less_or_greater_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 155,
        "column": 1,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 143
      },
      "name": "is_operator_less_or_greater_function_object",
      "override": false,
      "refid": "group__type__traits_1gaacc4f15485acd90b8018d4c818b244f5",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#variable-is_operator_less_or_greater_function_object_v\">is_operator_less_or_greater_function_object_v</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_function_object\">is_operator_less_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_greater_function_object\">is_operator_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_plus_function_object\">is_operator_plus_function_object</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a BinaryPredicate equivalent to operator< or operator>, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_or_greater_function_object",
      "type": "integral_constant< bool, detail::is_operator_less_function_object_impl< T >::value||detail::is_operator_greater_function_object_impl< T >::value >",
      "typePlain": "integral_constant< bool, detail::is_operator_less_function_object_impl< T >::value||detail::is_operator_greater_function_object_impl< T >::value >",
      "url": "/thrust/api/groups/group__type__traits.html#using-is_operator_less_or_greater_function_object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is_operator_plus_function_object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/FunctionObject\">FunctionObject</a> equivalent to <code>operator+</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using is_operator_plus_function_object =  detail::is_operator_plus_function_object_impl<T>",
      "explicit": false,
      "fullname": "type_traits::is_operator_plus_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_plus_function_object.h",
        "bodyStart": 74,
        "column": 1,
        "file": "thrust/type_traits/is_operator_plus_function_object.h",
        "line": 66
      },
      "name": "is_operator_plus_function_object",
      "override": false,
      "refid": "group__type__traits_1ga1bb9ecc46da681069c8be8ca90ce2560",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#variable-is_operator_plus_function_object_v\">is_operator_plus_function_object_v</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_function_object\">is_operator_less_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_greater_function_object\">is_operator_greater_function_object</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_operator_less_or_greater_function_object\">is_operator_less_or_greater_function_object</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a FunctionObject equivalent to operator+, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_plus_function_object",
      "type": "detail::is_operator_plus_function_object_impl< T >",
      "typePlain": "detail::is_operator_plus_function_object_impl< T >",
      "url": "/thrust/api/groups/group__type__traits.html#using-is_operator_plus_function_object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is_trivially_relocatable",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is <a href=\"https://wg21.link/P1144\">_TriviallyRelocatable_</a>, aka can be bitwise copied with a facility like <a href=\"https://en.cppreference.com/w/cpp/string/byte/memcpy\"><code>std::memcpy</code></a>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using is_trivially_relocatable =  detail::is_trivially_relocatable_impl<T>",
      "explicit": false,
      "fullname": "type_traits::is_trivially_relocatable",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/is_trivially_relocatable.h",
        "bodyStart": 82,
        "column": 1,
        "file": "thrust/type_traits/is_trivially_relocatable.h",
        "line": 74
      },
      "name": "is_trivially_relocatable",
      "override": false,
      "refid": "group__type__traits_1ga63c48e59d538eac161c9306d7eeb7991",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#variable-is_trivially_relocatable_v\">is_trivially_relocatable_v</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable_to\">is_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_indirectly_trivially_relocatable_to\">is_indirectly_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/classes/structproclaim__trivially__relocatable.html\">proclaim_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#define-thrust_proclaim_trivially_relocatable\">THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is TriviallyRelocatable, aka can be bitwise copied with a facility like std::memcpy, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_trivially_relocatable",
      "type": "detail::is_trivially_relocatable_impl< T >",
      "typePlain": "detail::is_trivially_relocatable_impl< T >",
      "url": "/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is_trivially_relocatable_to",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryTypeTrait\">_BinaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>From</code> is <a href=\"https://wg21.link/P1144\">_TriviallyRelocatable_</a>, to <code>To</code>, aka can be bitwise copied with a facility like <a href=\"https://en.cppreference.com/w/cpp/string/byte/memcpy\"><code>std::memcpy</code></a>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using is_trivially_relocatable_to =  integral_constant< bool , detail::is_same<From, To>::value && is_trivially_relocatable<To>::value >",
      "explicit": false,
      "fullname": "type_traits::is_trivially_relocatable_to",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/is_trivially_relocatable.h",
        "bodyStart": 127,
        "column": 1,
        "file": "thrust/type_traits/is_trivially_relocatable.h",
        "line": 116
      },
      "name": "is_trivially_relocatable_to",
      "override": false,
      "refid": "group__type__traits_1ga72b0a718db19371137ee0e55374b8abf",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#variable-is_trivially_relocatable_to_v\">is_trivially_relocatable_to_v</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable\">is_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_indirectly_trivially_relocatable_to\">is_indirectly_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/classes/structproclaim__trivially__relocatable.html\">proclaim_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#define-thrust_proclaim_trivially_relocatable\">THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "BinaryTypeTrait that returns true_type if From is TriviallyRelocatable, to To, aka can be bitwise copied with a facility like std::memcpy, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename From",
          "typePlain": "typename From"
        },
        {
          "name": "",
          "type": "typename To",
          "typePlain": "typename To"
        }
      ],
      "title": "is_trivially_relocatable_to",
      "type": "integral_constant< bool, detail::is_same< From, To >::value &&<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable\">is_trivially_relocatable</a>< To >::value >",
      "typePlain": "integral_constant< bool, detail::is_same< From, To >::value &&is_trivially_relocatable< To >::value >",
      "url": "/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable_to",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is_indirectly_trivially_relocatable_to",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryTypeTrait\">_BinaryTypeTrait_</a> that returns <code>true&#95;type</code> if the element type of <code>FromIterator</code> is <a href=\"https://wg21.link/P1144\">_TriviallyRelocatable_</a>, to the element type of <code>ToIterator</code>, aka can be bitwise copied with a facility like <a href=\"https://en.cppreference.com/w/cpp/string/byte/memcpy\"><code>std::memcpy</code></a>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using is_indirectly_trivially_relocatable_to =  integral_constant< bool , is_contiguous_iterator<FromIterator>::value && is_contiguous_iterator<ToIterator>::value && is_trivially_relocatable_to< typename thrust::iterator_traits<FromIterator>::value_type, typename thrust::iterator_traits<ToIterator>::value_type >::value >",
      "explicit": false,
      "fullname": "type_traits::is_indirectly_trivially_relocatable_to",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/is_trivially_relocatable.h",
        "bodyStart": 179,
        "column": 1,
        "file": "thrust/type_traits/is_trivially_relocatable.h",
        "line": 163
      },
      "name": "is_indirectly_trivially_relocatable_to",
      "override": false,
      "refid": "group__type__traits_1gaeb94c1b335d2f07182a77360d4d02241",
      "see": [
        "is_indirectly_trivially_relocatable_to_v ",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable\">is_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable_to\">is_trivially_relocatable_to</a>",
        "<a href=\"/thrust/api/classes/structproclaim__trivially__relocatable.html\">proclaim_trivially_relocatable</a>",
        "<a href=\"/thrust/api/groups/group__type__traits.html#define-thrust_proclaim_trivially_relocatable\">THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "BinaryTypeTrait that returns true_type if the element type of FromIterator is TriviallyRelocatable, to the element type of ToIterator, aka can be bitwise copied with a facility like std::memcpy, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename FromIterator",
          "typePlain": "typename FromIterator"
        },
        {
          "name": "",
          "type": "typename ToIterator",
          "typePlain": "typename ToIterator"
        }
      ],
      "title": "is_indirectly_trivially_relocatable_to",
      "type": "integral_constant< bool, <a href=\"/thrust/api/groups/group__type__traits.html#using-is_contiguous_iterator\">is_contiguous_iterator</a>< FromIterator >::value &&<a href=\"/thrust/api/groups/group__type__traits.html#using-is_contiguous_iterator\">is_contiguous_iterator</a>< ToIterator >::value &&<a href=\"/thrust/api/groups/group__type__traits.html#using-is_trivially_relocatable_to\">is_trivially_relocatable_to</a>< typename thrust::iterator_traits< FromIterator >::value_type, typename thrust::iterator_traits< ToIterator >::value_type >::value >",
      "typePlain": "integral_constant< bool, is_contiguous_iterator< FromIterator >::value &&is_contiguous_iterator< ToIterator >::value &&is_trivially_relocatable_to< typename thrust::iterator_traits< FromIterator >::value_type, typename thrust::iterator_traits< ToIterator >::value_type >::value >",
      "url": "/thrust/api/groups/group__type__traits.html#using-is_indirectly_trivially_relocatable_to",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-conjunction",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... && Ts::value)</code>. ",
      "category": "types",
      "const": false,
      "definition": "using conjunction =  std::conjunction<Ts...>",
      "explicit": false,
      "fullname": "type_traits::conjunction",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 53,
        "column": 1,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 53
      },
      "name": "conjunction",
      "override": false,
      "refid": "group__type__traits_1ga61ee1c481b02c164552595e4ee9d1a81",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#variable-conjunction_v\">conjunction_v</a>",
        "<a href=\"/thrust/api/classes/structconjunction__value.html\">conjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/conjunction\"><code>std::conjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "std::integral_constant whose value is (... && Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "conjunction",
      "type": "std::conjunction< Ts... >",
      "typePlain": "std::conjunction< Ts... >",
      "url": "/thrust/api/groups/group__type__traits.html#using-conjunction",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-disjunction",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... || Ts::value)</code>. ",
      "category": "types",
      "const": false,
      "definition": "using disjunction =  std::disjunction<Ts...>",
      "explicit": false,
      "fullname": "type_traits::disjunction",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 98,
        "column": 1,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 98
      },
      "name": "disjunction",
      "override": false,
      "refid": "group__type__traits_1ga3320154887ececb282bdef50a9228774",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#variable-disjunction_v\">disjunction_v</a>",
        "<a href=\"/thrust/api/classes/structdisjunction__value.html\">disjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/disjunction\"><code>std::disjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "std::integral_constant whose value is (... || Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "disjunction",
      "type": "std::disjunction< Ts... >",
      "typePlain": "std::disjunction< Ts... >",
      "url": "/thrust/api/groups/group__type__traits.html#using-disjunction",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-negation",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>!Ts::value</code>. ",
      "category": "types",
      "const": false,
      "definition": "using negation =  std::negation<T>",
      "explicit": false,
      "fullname": "type_traits::negation",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 140,
        "column": 1,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 140
      },
      "name": "negation",
      "override": false,
      "refid": "group__type__traits_1gae7303cce51081177cdbc795e0d4fdd33",
      "see": [
        "<a href=\"/thrust/api/groups/group__type__traits.html#variable-negation_v\">negation_v</a>",
        "<a href=\"/thrust/api/classes/structnegation__value.html\">negation_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/negation\"><code>std::negation</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "std::integral_constant whose value is !Ts::value. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "negation",
      "type": "std::negation< T >",
      "typePlain": "std::negation< T >",
      "url": "/thrust/api/groups/group__type__traits.html#using-negation",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-remove_cvref_t",
      "brief": "Type alias that removes <a href=\"https://en.cppreference.com/w/cpp/language/cv\">const-volatile qualifiers</a> and <a href=\"https://en.cppreference.com/w/cpp/language/reference\">references</a> from <code>T</code>. Equivalent to <code>remove&#95;cv&#95;t&lt;remove&#95;reference&#95;t&lt;T&gt;&gt;</code>. ",
      "category": "types",
      "const": false,
      "definition": "using remove_cvref_t =  typename remove_cvref<T>::type",
      "explicit": false,
      "fullname": "type_traits::remove_cvref_t",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "location": {
        "bodyFile": "thrust/type_traits/remove_cvref.h",
        "bodyStart": 87,
        "column": 1,
        "file": "thrust/type_traits/remove_cvref.h",
        "line": 87
      },
      "name": "remove_cvref_t",
      "override": false,
      "refid": "group__type__traits_1ga3c0600da43d6867a247432fcc43ce84f",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cvref\">std::remove_cvref</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_cv</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_const</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_volatile</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_reference</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Type alias that removes const-volatile qualifiers and references from T. Equivalent to remove_cv_t<remove_reference_t<T>>. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "remove_cvref_t",
      "type": "typename <a href=\"/thrust/api/classes/structremove__cvref.html\">remove_cvref</a>< T >::type",
      "typePlain": "typename remove_cvref< T >::type",
      "url": "/thrust/api/groups/group__type__traits.html#using-remove_cvref_t",
      "visibility": "public"
    }
  ],
  "refid": "group__type__traits",
  "static": false,
  "strong": false,
  "title": "Type Traits",
  "url": "/thrust/api/groups/group__type__traits.html",
  "visibility": "public"
}