{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "logical",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "reductions",
    "kind": "group",
    "name": "reductions",
    "refid": "group__reductions",
    "title": "Reductions",
    "url": "/thrust/api/groups/group__reductions.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "name": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "/thrust/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "reductions",
      "kind": "group",
      "name": "reductions",
      "refid": "group__reductions",
      "title": "Reductions",
      "url": "/thrust/api/groups/group__reductions.html",
      "visibility": "public"
    }
  ],
  "name": "logical",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "reductions",
    "kind": "group",
    "name": "reductions",
    "refid": "group__reductions",
    "title": "Reductions",
    "url": "/thrust/api/groups/group__reductions.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "name": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "/thrust/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "reductions",
      "kind": "group",
      "name": "reductions",
      "refid": "group__reductions",
      "title": "Reductions",
      "url": "/thrust/api/groups/group__reductions.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-all_of",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool all_of",
      "deleted": false,
      "details": "<code>all&#95;of</code> determines whether all elements in a range satify a predicate. Specifically, <code>all&#95;of</code> returns <code>true</code> if <code>pred(&#42;i)</code> is <code>true</code> for every iterator <code>i</code> in the range <code>[first, last)</code> and <code>false</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::all_of(thrust::host, A, A + 2, thrust::identity<bool>()); // returns true\nthrust::all_of(thrust::host, A, A + 3, thrust::identity<bool>()); // returns false\n\n// empty range\nthrust::all_of(thrust::host, A, A, thrust::identity<bool>()); // returns false\n```",
      "explicit": false,
      "fullname": "logical::all_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 75
      },
      "name": "all_of",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__logical_1ga51028243b8d712cd8a4fd32ec5604cc2",
      "returns": [
        "<code>true</code>, if all elements satisfy the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__logical.html#function-any_of\">any_of</a>",
        "<a href=\"/thrust/api/groups/group__logical.html#function-none_of\">none_of</a>",
        "<a href=\"/thrust/api/groups/group__transformed__reductions.html#function-transform_reduce\">transform_reduce</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "all_of",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "/thrust/api/groups/group__logical.html#function-all_of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-all_of",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool all_of",
      "deleted": false,
      "details": "<code>all&#95;of</code> determines whether all elements in a range satify a predicate. Specifically, <code>all&#95;of</code> returns <code>true</code> if <code>pred(&#42;i)</code> is <code>true</code> for every iterator <code>i</code> in the range <code>[first, last)</code> and <code>false</code> otherwise.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::all_of(A, A + 2, thrust::identity<bool>()); // returns true\nthrust::all_of(A, A + 3, thrust::identity<bool>()); // returns false\n\n// empty range\nthrust::all_of(A, A, thrust::identity<bool>()); // returns false\n```",
      "explicit": false,
      "fullname": "logical::all_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 110
      },
      "name": "all_of",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__logical_1ga753a8c6c3d601e013c5cf47ef8c5bde0",
      "returns": [
        "<code>true</code>, if all elements satisfy the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__logical.html#function-any_of\">any_of</a>",
        "<a href=\"/thrust/api/groups/group__logical.html#function-none_of\">none_of</a>",
        "<a href=\"/thrust/api/groups/group__transformed__reductions.html#function-transform_reduce\">transform_reduce</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "all_of",
      "type": "bool",
      "typePlain": "bool",
      "url": "/thrust/api/groups/group__logical.html#function-all_of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-any_of",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool any_of",
      "deleted": false,
      "details": "<code>any&#95;of</code> determines whether any element in a range satifies a predicate. Specifically, <code>any&#95;of</code> returns <code>true</code> if <code>pred(&#42;i)</code> is <code>true</code> for any iterator <code>i</code> in the range <code>[first, last)</code> and <code>false</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::any_of(thrust::host, A, A + 2, thrust::identity<bool>()); // returns true\nthrust::any_of(thrust::host, A, A + 3, thrust::identity<bool>()); // returns true\n\nthrust::any_of(thrust::host, A + 2, A + 3, thrust::identity<bool>()); // returns false\n\n// empty range\nthrust::any_of(thrust::host, A, A, thrust::identity<bool>()); // returns false\n```",
      "explicit": false,
      "fullname": "logical::any_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 152
      },
      "name": "any_of",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__logical_1gad1318987525389675b04ffd618a15061",
      "returns": [
        "<code>true</code>, if any element satisfies the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__logical.html#function-all_of\">all_of</a>",
        "<a href=\"/thrust/api/groups/group__logical.html#function-none_of\">none_of</a>",
        "<a href=\"/thrust/api/groups/group__transformed__reductions.html#function-transform_reduce\">transform_reduce</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "any_of",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "/thrust/api/groups/group__logical.html#function-any_of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-any_of",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool any_of",
      "deleted": false,
      "details": "<code>any&#95;of</code> determines whether any element in a range satifies a predicate. Specifically, <code>any&#95;of</code> returns <code>true</code> if <code>pred(&#42;i)</code> is <code>true</code> for any iterator <code>i</code> in the range <code>[first, last)</code> and <code>false</code> otherwise.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::any_of(A, A + 2, thrust::identity<bool>()); // returns true\nthrust::any_of(A, A + 3, thrust::identity<bool>()); // returns true\n\nthrust::any_of(A + 2, A + 3, thrust::identity<bool>()); // returns false\n\n// empty range\nthrust::any_of(A, A, thrust::identity<bool>()); // returns false\n```",
      "explicit": false,
      "fullname": "logical::any_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 188
      },
      "name": "any_of",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__logical_1gafe8c7d5f97672c6410bf838ef50cd424",
      "returns": [
        "<code>true</code>, if any element satisfies the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__logical.html#function-all_of\">all_of</a>",
        "<a href=\"/thrust/api/groups/group__logical.html#function-none_of\">none_of</a>",
        "<a href=\"/thrust/api/groups/group__transformed__reductions.html#function-transform_reduce\">transform_reduce</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "any_of",
      "type": "bool",
      "typePlain": "bool",
      "url": "/thrust/api/groups/group__logical.html#function-any_of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-none_of",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool none_of",
      "deleted": false,
      "details": "<code>none&#95;of</code> determines whether no element in a range satifies a predicate. Specifically, <code>none&#95;of</code> returns <code>true</code> if there is no iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>true</code>, and <code>false</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::none_of(thrust::host, A, A + 2, thrust::identity<bool>()); // returns false\nthrust::none_of(thrust::host, A, A + 3, thrust::identity<bool>()); // returns false\n\nthrust::none_of(thrust::host, A + 2, A + 3, thrust::identity<bool>()); // returns true\n\n// empty range\nthrust::none_of(thrust::host, A, A, thrust::identity<bool>()); // returns true\n```",
      "explicit": false,
      "fullname": "logical::none_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 230
      },
      "name": "none_of",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__logical_1ga1ea06de9fc7d3743f290919c29d201db",
      "returns": [
        "<code>true</code>, if no element satisfies the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__logical.html#function-all_of\">all_of</a>",
        "<a href=\"/thrust/api/groups/group__logical.html#function-any_of\">any_of</a>",
        "<a href=\"/thrust/api/groups/group__transformed__reductions.html#function-transform_reduce\">transform_reduce</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "none_of",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "/thrust/api/groups/group__logical.html#function-none_of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-none_of",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool none_of",
      "deleted": false,
      "details": "<code>none&#95;of</code> determines whether no element in a range satifies a predicate. Specifically, <code>none&#95;of</code> returns <code>true</code> if there is no iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>true</code>, and <code>false</code> otherwise.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::none_of(A, A + 2, thrust::identity<bool>()); // returns false\nthrust::none_of(A, A + 3, thrust::identity<bool>()); // returns false\n\nthrust::none_of(A + 2, A + 3, thrust::identity<bool>()); // returns true\n\n// empty range\nthrust::none_of(A, A, thrust::identity<bool>()); // returns true\n```",
      "explicit": false,
      "fullname": "logical::none_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 266
      },
      "name": "none_of",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "refid": "group__logical_1gac14ec4a2cb14a46136f1d5d88f0a7670",
      "returns": [
        "<code>true</code>, if no element satisfies the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"/thrust/api/groups/group__logical.html#function-all_of\">all_of</a>",
        "<a href=\"/thrust/api/groups/group__logical.html#function-any_of\">any_of</a>",
        "<a href=\"/thrust/api/groups/group__transformed__reductions.html#function-transform_reduce\">transform_reduce</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "none_of",
      "type": "bool",
      "typePlain": "bool",
      "url": "/thrust/api/groups/group__logical.html#function-none_of",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "refid": "group__logical",
  "static": false,
  "strong": false,
  "title": "Logical",
  "url": "/thrust/api/groups/group__logical.html",
  "visibility": "public"
}